/* ========================================================================
   Copyright (c) 1990,1996   Synergistic Software
   All Rights Reserved.
   =======================================================================
   Filename: ItemType.cpp -Has a Table of All gettable objects and effects
   Author: Wes Cumberland
   ======================================================================== */
   
#include "itemtype.hxx"
#include "invntory.hxx"
#include "playstat.hxx"
#include "avatar.hxx"
#include "tmsgbox.hxx"
#include "dice.h"
#include "strenum.h"
#include "spell.hxx"
#include "blood.hxx"
#include "scnmgr.hxx"

#include "battle.hxx"
#include "battleui.hxx"
#include "strenum.h"   
#include "resurect.hxx"
#include "itemeqp.hxx"
#include "regen.hxx"
#include "rlmspell.hxx"

//ItemEffects::ActiveItem _ActiveItems[MAX_ACTIVE_ITEMS] = {
DEFINE_VECTOR_MEMBER_DATA_S(ItemEffects::ActiveItem,
							ItemEffects,
							ActiveItems,
							MAX_ACTIVE_ITEMS) = {
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem(),
	ItemEffects::ActiveItem()
};
DEFINE_VECTOR_MEMBER_CLASS(ItemEffects::ActiveItem,
				    		ItemEffects,
				    		ActiveItems);





BOOL fQuietItems=FALSE;  //whether or not Items display a message box/play a sound
DEFINE_VECTOR_DATA(ItemType,ItemTypes) =
{
//Mundane Items
//                   Extended Data
//Ctor   Category   Atr vvv GameType  Effect               Arg Dur IconFileName		MiscInfo
//------|----------|---|---|---------|--------------------|---|---|----------------|--------|
ItemType(IC_MUNDANE,0,	-1,	NO_THING, NULL/*dont ref me!*/, 0, 0,  "BOWL01",	STR_NULL),
ItemType(IC_MUNDANE,0,	-1,	BOWL_1,	  ItemEffects::None, 	0, 0,  "BOWL01",		STR_ITEM_DESC_BOWL),
ItemType(IC_MUNDANE,0,	-1,	BUCKET_1, ItemEffects::None, 	0, 0,  "BUKT01",	STR_ITEM_DESC_BUCKET),
ItemType(IC_MUNDANE,0,	-1,	CANDLE_1, ItemEffects::None, 	0, 0,  "CNDL01",	STR_ITEM_DESC_CANDLE),
ItemType(IC_MUNDANE,0,	-1,	CUP_1,	  ItemEffects::None, 	0, 0,  "CUP_01",		STR_ITEM_DESC_CUP),
ItemType(IC_MUNDANE,0,	-1,	FLAGON_1, ItemEffects::None, 	0, 0,  "FLGN01",	STR_ITEM_DESC_FLAGON),
ItemType(IC_MUNDANE,0,	-1,	HELMET_1, ItemEffects::None, 	0, 0,  "HELM01",		STR_ITEM_DESC_HELMET),
ItemType(IC_MUNDANE,0,	-1,	KNIFE_1,  ItemEffects::None, 	0, 0,  "KNIF01",		STR_ITEM_DESC_KNIFE),
ItemType(IC_MUNDANE,0,	-1,	PLATE_1,  ItemEffects::None, 	0, 0,  "PLAT01",		STR_ITEM_DESC_PLATE),
ItemType(IC_MUNDANE,0,	-1,	SPEAR_1,  ItemEffects::None, 	0, 0,  "SPER01",		STR_ITEM_DESC_SPEAR),

ItemType(IC_MUNDANE,0,	-1,	SWORD_1,  ItemEffects::None, 	0, 0,  "SWRD01",		STR_ITEM_DESC_SWORD),

//Magical Items
//Ctor   Category   Atr	   	GameType						Effect	  						Arg					Dur Icon     MiscInfo
//------|----------|---|---|-------------------------------|-------------------------------|-------------------|---|--------|--------|
ItemType(IC_MUNDANE,0,	-1,	KEY_BLACK,						ItemEffects::KeyExplanation,	0,					0,	"KEYP01", STR_ITEM_DESC_KEY_GENERICMAGIC),
ItemType(IC_MUNDANE,0,	-1,	KEY_BLUE, 						ItemEffects::KeyExplanation,	0,					0,	"KEYB01", STR_ITEM_DESC_KEY_GENERICMAGIC),
ItemType(IC_MUNDANE,0,	-1,	KEY_BONE,						ItemEffects::KeyExplanation,	0,					0,	"KEYT01", STR_ITEM_DESC_KEY_GENERICMAGIC),
ItemType(IC_MUNDANE,0,	-1,	KEY_JEWELED,					ItemEffects::KeyExplanation,	0,					0,	"KEYG01", STR_ITEM_DESC_KEY_GENERICMAGIC),
ItemType(IC_MUNDANE,0,	-1,	KEY_RED,						ItemEffects::KeyExplanation,	0,					0,	"KEYR01", STR_ITEM_DESC_KEY_GENERICMAGIC),
ItemType(IC_MUNDANE,0,	-1,	KEY_SILVER,						ItemEffects::KeyExplanation,	0,					0,	"KEYV01", STR_ITEM_DESC_KEY_GENERICMAGIC),
ItemType(IC_MUNDANE,0,	-1,	KEY_WHITE,						ItemEffects::KeyExplanation,	0,					0,	"KEYW01", STR_ITEM_DESC_KEY_GENERICMAGIC),
ItemType(IC_MUNDANE,0,	-1,	KEY_SKELETON,					ItemEffects::KeyExplanation,	0,					0,	"KEYX01", STR_ITEM_DESC_KEY_GENERICMAGIC),
ItemType(IC_MUNDANE,0,	-1,	KEY_STONE,						ItemEffects::KeyExplanation,	0,					0,	"KEYA01", STR_ITEM_DESC_KEY_GENERICMAGIC),
ItemType(IC_MUNDANE,0,	-1,	KEY_TINY,						ItemEffects::KeyExplanation,	0,					0,	"KEYL01", STR_ITEM_DESC_KEY_GENERICMAGIC),
ItemType(IC_MAGITEM,0,	-1,	AMULET_OF_FEATHER_FALL,			ItemEffects::FeatherFall,		0,					60,	"AMUL01", STR_ITEM_DESC_AMULET_OF_FEATHER_FALL),
ItemType(IC_MAGITEM,0,	-1,	AMULET_OF_SPEED,				ItemEffects::Speed,				0,					60,	"AMUL02", STR_ITEM_DESC_AMULET_OF_SPEED),
ItemType(IC_MAGITEM,0,	-1,	AMULET_OF_STRIDING_AND_SPRINGING,ItemEffects::StrideAndSpring,	0,					60,	"AMUL03", STR_ITEM_DESC_AMULET_OF_STRIDING_AND_SPRINGING),
ItemType(IC_MAGITEM,TARGET,	-1,	AMULET_VERSUS_UNDEAD,		ItemEffects::UndeadTurn,		USE_LEVEL|MAKE_DICE(1,6,0),180,"AMUL04", STR_ITEM_DESC_AMULET_VERSUS_UNDEAD),
ItemType(IC_MAGITEM,0,	-1,	AMULET_OF_WATER_WALKING,		ItemEffects::WaterWalk,			0,					60,	"AMUL05", STR_ITEM_DESC_AMULET_OF_WATER_WALKING),
ItemType(IC_MUNDANE,0,	-1,	BALM_OF_HEALING,				ItemEffects::Heal,HEAL_RANDOM|MAKE_DICE(1,3,0),		0,	"BALMHL", STR_ITEM_DESC_BALM_OF_HEALING),
ItemType(IC_MAGITEM,0,	-1,	BOOK_OF_EXALTED_DEEDS,			ItemEffects::BookOfExaltedDeeds,0,					0,	"BOOK01", STR_ITEM_DESC_BOOK_OF_EXALTED_DEEDS),
ItemType(IC_MAGITEM,0,	-1,	BOOK_OF_VILE_DARKNESS,			ItemEffects::BookOfVileDarkness,0,					0,	"BOOK02", STR_ITEM_DESC_BOOK_OF_VILE_DARKNESS),
ItemType(IC_MAGITEM,0,	-1,	CHIME_OF_OPENING,				ItemEffects::KeyExplanation,	0,					0,	"CHIMEO", STR_ITEM_DESC_CHIME_OF_OPENING),
ItemType(IC_MAGITEM,0,	-1,	CLOAK_OF_PROTECTION_1,			ItemEffects::CloakProtect,		1|PROT_CLOAK,		180,"CLOK01", STR_ITEM_DESC_CLOAK_OF_PROTECTION_1),
ItemType(IC_MAGITEM,0,	-1,	CLOAK_OF_PROTECTION_2,			ItemEffects::CloakProtect,		2|PROT_CLOAK,		180,"CLOK02", STR_ITEM_DESC_CLOAK_OF_PROTECTION_2),
ItemType(IC_MAGITEM,0,	-1,	CLOAK_OF_PROTECTION_3,			ItemEffects::CloakProtect,		3|PROT_CLOAK,		180,"CLOK03", STR_ITEM_DESC_CLOAK_OF_PROTECTION_3),
ItemType(IC_MAGITEM,0,	-1,	GAUNTLETS_OF_DEXTERITY,			ItemEffects::GauntletsOfDex,	0,					180,"GAUN01", STR_ITEM_DESC_GAUNTLETS_OF_DEXTERITY),
ItemType(IC_MAGITEM,0,	-1,	GAUNTLETS_OF_OGRE_POWER,		ItemEffects::GuantletsOfOgrePow,CLASS_RESTRICTED,	180,"GAUN02", STR_ITEM_DESC_GAUNTLETS_OF_OGRE_POWER),
ItemType(IC_MAGITEM,0,	-1,	GEM_BLUE,						ItemEffects::KeyExplanation,	0,					0,	"GEMB01", STR_ITEM_DESC_GEM_BLUE),
ItemType(IC_MAGITEM,0,	-1,	GEM_GREEN,						ItemEffects::KeyExplanation,	0,					0,	"GEMG01", STR_ITEM_DESC_GEM_GREEN),
ItemType(IC_MAGITEM,0,	-1,	GEM_OF_PASSAGE,					ItemEffects::KeyExplanation,	0,					0,	"GEMX01", STR_ITEM_DESC_GEM_OF_PASSAGE),
ItemType(IC_MAGITEM,0,	-1,	GEM_OF_SHIFTING,				ItemEffects::MapTeleport,		0,					0,	"GEMP01", STR_ITEM_DESC_GEM_OF_SHIFTING),
ItemType(IC_MAGITEM,0,	-1,	IOUN_STONE_PALE_BLUE,			ItemEffects::AddToAttribute,	AT_STR|1,			180,"IOUN01", STR_ITEM_DESC_IOUN_STONE_PALE_BLUE),
ItemType(IC_MAGITEM,0,	-1,	IOUN_STONE_SCARLET_AND_BLUE,	ItemEffects::AddToAttribute,	AT_INT|1,			180,"IOUN02", STR_ITEM_DESC_IOUN_STONE_SCARLET_AND_BLUE),
ItemType(IC_MAGITEM,0,	-1,	IOUN_STONE_INCANDESCENT_BLUE,	ItemEffects::AddToAttribute,	AT_WIS|1,			180,"IOUN03", STR_ITEM_DESC_IOUN_STONE_INCANDESCENT_BLUE),
ItemType(IC_MAGITEM,0,	-1,	IOUN_STONE_DEEP_RED,			ItemEffects::AddToAttribute,	AT_DEX|1,			180,"IOUN04", STR_ITEM_DESC_IOUN_STONE_DEEP_RED),
ItemType(IC_MAGITEM,0,	-1,	IOUN_STONE_PINK,				ItemEffects::AddToAttribute,	AT_CON|1,			180,"IOUN05", STR_ITEM_DESC_IOUN_STONE_PINK),
ItemType(IC_MAGITEM,0,	-1,	IOUN_STONE_PINK_AND_GREEN,		ItemEffects::AddToAttribute,	AT_CHA|1,			180,"IOUN06", STR_ITEM_DESC_IOUN_STONE_PINK_AND_GREEN),
ItemType(IC_MAGITEM,0,	-1,	IOUN_STONE_PEARLY_WHITE,		ItemEffects::Regenerate,		11,					180,"IOUN08", STR_ITEM_DESC_IOUN_STONE_PEARLY_WHITE),
ItemType(IC_MAGITEM,0,	-1,	IOUN_STONE_DUSTY_ROSE,			ItemEffects::CloakProtect,		1,					180,"IOUN12", STR_ITEM_DESC_IOUN_STONE_DUSTY_ROSE),
ItemType(IC_MAGITEM,0,	-1,	LIBRIUM_OF_GAINFUL_CONJURATION,	ItemEffects::LibrOfConjuration,	CLASS_RESTRICTED,	0,	"LIBR01", STR_ITEM_DESC_LIBRIUM_OF_GAINFUL_CONJURATION),
ItemType(IC_MAGITEM,0,	-1,	LIBRIUM_OF_INEFFABLE_DAMNATION,	ItemEffects::LibrOfDamnation,	CLASS_RESTRICTED,	0,	"LIBR02", STR_ITEM_DESC_LIBRIUM_OF_INEFFABLE_DAMNATION),
ItemType(IC_MAGITEM,0,	-1,	LIBRIUM_OF_SILVER_MAGIC,		ItemEffects::LibrSilver,		CLASS_RESTRICTED,	0,	"LIBR03", STR_ITEM_DESC_LIBRIUM_OF_SILVER_MAGIC),
ItemType(IC_MAGITEM,TARGET,	-1,	NECKLACE_OF_MISSILES_8,		ItemEffects::HurlFireBall,		AT_FIRE|MAKE_DICE(2,6,0),0,"NECKMI",STR_ITEM_DESC_NECKLACE_OF_MISSILES),
ItemType(IC_MAGITEM,0,	-1,	OIL_OF_SHARPNESS_1,				ItemEffects::ImproveWeapon,		1,					180,"OILS01", STR_ITEM_DESC_OIL_OF_SHARPNESS_1),
ItemType(IC_MAGITEM,0,	-1,	OIL_OF_SHARPNESS_2,				ItemEffects::ImproveWeapon,		2,					180,"OILS02", STR_ITEM_DESC_OIL_OF_SHARPNESS_2),
ItemType(IC_MAGITEM,0,	-1,	OIL_OF_SHARPNESS_3,				ItemEffects::ImproveWeapon,		3,					180,"OILS03", STR_ITEM_DESC_OIL_OF_SHARPNESS_3),
ItemType(IC_MAGITEM,0,	-1,	OIL_OF_SHARPNESS_4,				ItemEffects::ImproveWeapon,		4,					180,"OILS04", STR_ITEM_DESC_OIL_OF_SHARPNESS_4),
ItemType(IC_MAGITEM,0,	-1,	OIL_OF_SHARPNESS_5,				ItemEffects::ImproveWeapon,		5,					180,"OILS05", STR_ITEM_DESC_OIL_OF_SHARPNESS_5),
ItemType(IC_MAGITEM,0,	-1,	POTION_OF_HILL_GIANT_STRENGTH,	ItemEffects::SetAttrTo,			CLASS_RESTRICTED|AT_STR|24,	180,"POTN06", STR_ITEM_DESC_POTION_OF_HILL_GIANT_STRENGTH),
ItemType(IC_MAGITEM,0,	-1,	POTION_OF_STONE_GIANT_STRENGTH,	ItemEffects::SetAttrTo,			CLASS_RESTRICTED|AT_STR|25,	180,"POTN07", STR_ITEM_DESC_POTION_OF_STONE_GIANT_STRENGTH),
ItemType(IC_MAGITEM,0,	-1,	POTION_OF_FROST_GIANT_STRENGTH,	ItemEffects::SetAttrTo,			CLASS_RESTRICTED|AT_STR|26,	180,"POTN08", STR_ITEM_DESC_POTION_OF_FROST_GIANT_STRENGTH),
ItemType(IC_MAGITEM,0,	-1,	POTION_OF_FIRE_GIANT_STRENGTH,	ItemEffects::SetAttrTo,			CLASS_RESTRICTED|AT_STR|27,	180,"POTN09", STR_ITEM_DESC_POTION_OF_FIRE_GIANT_STRENGTH),
ItemType(IC_MAGITEM,0,	-1,	POTION_OF_CLOUD_GIANT_STRENGTH,	ItemEffects::SetAttrTo,			CLASS_RESTRICTED|AT_STR|28,	180,"POTN10", STR_ITEM_DESC_POTION_OF_CLOUD_GIANT_STRENGTH),
ItemType(IC_MAGITEM,0,	-1,	POTION_OF_STORM_GIANT_STRENGTH,	ItemEffects::SetAttrTo,			CLASS_RESTRICTED|AT_STR|29,	180,"POTN11", STR_ITEM_DESC_POTION_OF_STORM_GIANT_STRENGTH),
ItemType(IC_MAGITEM,0,	-1,	POTION_OF_TITAN_STRENGTH,		ItemEffects::SetAttrTo,			CLASS_RESTRICTED|AT_STR|30,	180,"POTN12", STR_ITEM_DESC_POTION_OF_TITAN_STRENGTH),
ItemType(IC_MAGITEM,0,	-1,	POTION_OF_DIMINUTION,			ItemEffects::Shrink,			25,					60,	"POTN14", STR_ITEM_DESC_POTION_OF_DIMINUTION),
ItemType(IC_MAGITEM,0,	-1,	POTION_OF_INVULNERABILITY,		ItemEffects::Invulnerable,		CLASS_RESTRICTED,	180,"POTN16", STR_ITEM_DESC_POTION_OF_INVULNERABILITY),
ItemType(IC_MAGITEM,0,	-1,	POTION_OF_LEVITATION,			ItemEffects::Levitate,			PARTY,				60,	"POTN17", STR_ITEM_DESC_POTION_OF_LEVITATION),
ItemType(IC_MAGITEM,0,	-1,	POTION_OF_FIRE_RESISTANCE,		ItemEffects::ActResistance,		_RESIST_FIRE,		180,"POTN01", STR_ITEM_DESC_POTION_OF_FIRE_RESISTANCE),
ItemType(IC_MAGITEM,0,	-1,	POTION_OF_FLYING,				ItemEffects::Flight,			0,					90,	"POTN05", STR_ITEM_DESC_POTION_OF_FLYING),
ItemType(IC_MAGITEM,0,	-1,	POTION_OF_HEALING,				ItemEffects::Heal,HEAL_RANDOM|MAKE_DICE(2,4,2),		0,	"POTN04", STR_ITEM_DESC_POTION_OF_HEALING),
ItemType(IC_MAGITEM,0,	-1,	POTION_OF_EXTRA_HEALING,		ItemEffects::Heal,HEAL_RANDOM|MAKE_DICE(3,8,3),		0,	"POTN02", STR_ITEM_DESC_POTION_OF_EXTRA_HEALING),
ItemType(IC_MAGITEM,0,	-1,	RING_OF_FEATHER_FALLING,		ItemEffects::RingFeatherFall,		0,					60,	"RING01", STR_ITEM_DESC_RING_OF_FEATHER_FALLING),
ItemType(IC_MAGITEM,0,	-1,	RING_OF_FIRE_FALLING,			ItemEffects::RingResistance,	_RESIST_FIRE,		180,"RING02", STR_ITEM_DESC_RING_OF_FIRE_FALLING),
ItemType(IC_MAGITEM,0,	-1,	RING_OF_JUMPING,				ItemEffects::RingJump,				2,					60,	"RING04", STR_ITEM_DESC_RING_OF_JUMPING),
ItemType(IC_MAGITEM,0,	-1,	RING_OF_PROTECTION_1,			ItemEffects::CloakProtect,		1|PROT_RING,		180,"RING05", STR_ITEM_DESC_RING_OF_PROTECTION_1),
ItemType(IC_MAGITEM,0,	-1,	RING_OF_PROTECTION_2,			ItemEffects::CloakProtect,		2|PROT_RING,		180,"RING06", STR_ITEM_DESC_RING_OF_PROTECTION_2),
ItemType(IC_MAGITEM,0,	-1,	RING_OF_PROTECTION_3,			ItemEffects::CloakProtect,		3|PROT_RING,		180,"RING07", STR_ITEM_DESC_RING_OF_PROTECTION_3),
ItemType(IC_MAGITEM,0,	-1,	RING_OF_PROTECTION_4,			ItemEffects::CloakProtect,		4|PROT_RING,		180,"RING08", STR_ITEM_DESC_RING_OF_PROTECTION_4),
ItemType(IC_MAGITEM,0,	-1,	RING_OF_REGENERATION,			ItemEffects::Regenerate,		10,					180,"RING09", STR_ITEM_DESC_RING_OF_REGENERATION),
ItemType(IC_MAGITEM,0,	-1,	RING_OF_RESISTANCE_1,			ItemEffects::Resistance,		_RESIST_MAGIC|25,	180,"RING10", STR_ITEM_DESC_RING_OF_RESISTANCE_1),
ItemType(IC_MAGITEM,0,	-1,	RING_OF_RESISTANCE_2,			ItemEffects::Resistance,		_RESIST_MAGIC|50,	180,"RING11", STR_ITEM_DESC_RING_OF_RESISTANCE_2),
ItemType(IC_MAGITEM,0,	-1,	RING_OF_RESISTANCE_3,			ItemEffects::Resistance,		_RESIST_MAGIC|75,	180,"RING12", STR_ITEM_DESC_RING_OF_RESISTANCE_3),
ItemType(IC_MAGITEM,0,	-1,	RING_OF_NIGHTVISION,			ItemEffects::RingInfravision,	0,					180,"RING14", STR_ITEM_DESC_RING_OF_NIGHTVISION),
ItemType(IC_MAGITEM,0,	-1,	ROD_OF_RESURRECTION,			ItemEffects::Resurrection,		0,					0,	"RODRES", STR_ITEM_DESC_ROD_OF_RESURRECTION),
ItemType(IC_MAGITEM,0,	-1,	SCROLL_OF_ARMOR_ENHANCEMENT_1,	ItemEffects::ImproveArmor,		1|(4<<16),			180,"SCRL01", STR_ITEM_DESC_SCROLL_OF_ARMOR_ENHANCEMENT_1),
ItemType(IC_MAGITEM,0,	-1,	SCROLL_OF_ARMOR_ENHANCEMENT_2,	ItemEffects::ImproveArmor,		2|(3<<16),			180,"SCRL02", STR_ITEM_DESC_SCROLL_OF_ARMOR_ENHANCEMENT_2),
ItemType(IC_MAGITEM,0,	-1,	SCROLL_OF_ARMOR_ENHANCEMENT_3,	ItemEffects::ImproveArmor,		3|(2<<16),			180,"SCRL03", STR_ITEM_DESC_SCROLL_OF_ARMOR_ENHANCEMENT_3),
ItemType(IC_MAGITEM,0,	-1,	SCROLL_OF_ARMOR_ENHANCEMENT_4,	ItemEffects::ImproveArmor,		4|(1<<16),			180,"SCRL04", STR_ITEM_DESC_SCROLL_OF_ARMOR_ENHANCEMENT_4),
ItemType(IC_MAGITEM,0,	-1,	SCROLL_OF_ARMOR_ENHANCEMENT_5,	ItemEffects::ImproveArmor,		5|(0<<16),			180,"SCRL05", STR_ITEM_DESC_SCROLL_OF_ARMOR_ENHANCEMENT_5),
ItemType(IC_MAGITEM,0,	-1,	STAFF_OF_CURING,				ItemEffects::TouchSpell,		CLASS_RESTRICTED|HEAL_RANDOM|MAKE_DICE(3,6,3),	0,	"STAF01", STR_ITEM_DESC_STAFF_OF_CURING),
ItemType(IC_MUNDANE,0,	-1,	VIAL_OF_HOLY_WATER,				ItemEffects::UndeadTurn,		MAKE_DICE(1,6,0),	0,	"VIALHW", STR_ITEM_DESC_VIAL_OF_HOLY_WATER),
ItemType(IC_MAGITEM,0,	-1,	WAND_OF_ENEMY_DETECTION_3,		ItemEffects::MapHighlightEnemies,600,				60,	"WAND01", STR_ITEM_DESC_WAND_OF_ENEMY_DETECTION),
ItemType(IC_MAGITEM,TARGET,	-1, WAND_OF_FIRE_3,				ItemEffects::HurlFireBall,		CLASS_RESTRICTED|AT_FIRE|MAKE_DICE(6,6,0),	0,	"WAND03", STR_ITEM_DESC_WAND_OF_FIRE),
ItemType(IC_MAGITEM,TARGET,	-1, WAND_OF_FROST_3,			ItemEffects::FrostCone,			CLASS_RESTRICTED|MAKE_DICE(6,6,0),	0,	"WAND05", STR_ITEM_DESC_WAND_OF_FROST),
ItemType(IC_MAGITEM,0,	-1,	WAND_OF_ILLUMINATION_3,			ItemEffects::SeeInDark,			0,					180,"WAND06", STR_ITEM_DESC_WAND_OF_ILLUMINATION),
ItemType(IC_MAGITEM,TARGET,	-1, WAND_OF_LIGHTNING_3,		ItemEffects::ElectricalBolt,	CLASS_RESTRICTED|MAKE_DICE(6,6,0),	0,	"WAND07", STR_ITEM_DESC_WAND_OF_LIGHTNING),
ItemType(IC_MAGITEM,0,	-1,	WAND_OF_MAGIC_DETECTION_3,		ItemEffects::MapHighlightMagic,	600,					60,	"WAND08", STR_ITEM_DESC_WAND_OF_MAGIC_DETECTION),
ItemType(IC_MAGITEM,TARGET,	-1, WAND_OF_PARALYZATION_3,		ItemEffects::ParalyzeAllInRad,	CLASS_RESTRICTED|60,					0,	"WAND09", STR_ITEM_DESC_WAND_OF_PARALYZATION),
ItemType(IC_MAGITEM,0,	-1,	WAND_OF_SECRET_DETECTION_3,		ItemEffects::MapHighlightSecretDoors,600,			60,	"WAND10", STR_ITEM_DESC_WAND_OF_SECRET_DETECTION),
ItemType(IC_MAGITEM,0,	-1,	CANDLE_OF_INVOCATION,			ItemEffects::CandleOfInvocation,CLASS_RESTRICTED|0,					180,"CNDL02", STR_ITEM_DESC_CANDLE_OF_INVOCATION),
ItemType(IC_MUNDANE,0,	-1,	HINT_1,							ItemEffects::Parchment,			1,					0,	"PRCH01", STR_ITEM_DESC_PARCHMENT_1),
ItemType(IC_MUNDANE,0,	-1,	HINT_2,							ItemEffects::Parchment,			2,					0,	"PRCH02", STR_ITEM_DESC_PARCHMENT_1),
ItemType(IC_MUNDANE,0,	-1,	HINT_3,							ItemEffects::Parchment,			3,					0,	"PRCH03", STR_ITEM_DESC_PARCHMENT_1),
ItemType(IC_MUNDANE,0,	-1,	HINT_4,							ItemEffects::Parchment,			4,					0,	"PRCH02", STR_ITEM_DESC_PARCHMENT_1),
ItemType(IC_MUNDANE,0,	-1,	HINT_5,							ItemEffects::Parchment,			5,					0,	"PRCH01", STR_ITEM_DESC_PARCHMENT_1),



//Relics of Power
//Ctor   Category   Atr	   	GameType						Effect	  						Arg	Dur Icon     MiscInfo
//------|----------|---|---|-------------------------------|-------------------------------|---|---|--------|--------|
ItemType(IC_MAGITEM,0,	STR_INFO_DIERDRIEN_S_RING,				DIERDRIENS_RING,				ItemEffects::DierdriensRing,	0,	-1,	"RING15",STR_RELIC_DESC_DIERDRIENS_RING),
ItemType(IC_MAGITEM,0,	STR_INFO_FAELE_S_RING,					FAELES_RING,					ItemEffects::FaelesRing,		0,	-1,	"RING16",STR_RELIC_DESC_FAELES_RING),
ItemType(IC_MAGITEM,0,	STR_INFO_GAVELON_S_STAFF_OF_PROSPERITY,	GAVELONS_STAFF_OF_PROSPERITY,	ItemEffects::GavelonStaff,		0,	-1,	"STAF03",STR_RELIC_DESC_GAVELONS_STAFF_OF_PROSPERITY),
ItemType(IC_MAGITEM,0,	STR_INFO_AMULET_OF_INSPIRATION,			AMULET_OF_INSPIRATION,			ItemEffects::AmuletInspiration,	0,	-1, "AMUL06",STR_RELIC_DESC_AMULET_OF_INSPIRATION),
ItemType(IC_MAGITEM,0,	STR_INFO_BANNER_OF_ROELE,				BANNER_OF_ROELE,				ItemEffects::BannerOfRoele,		0,	-1,	"BANNER",STR_RELIC_DESC_BANNER_OF_ROELE),
ItemType(IC_MAGITEM,0,	STR_INFO_BARAZAD_TOOLS,					BARAZADS_TOOLS,					ItemEffects::BarazadsTools,		0,	-1,	"TOOLSB",STR_RELIC_DESC_BARAZADS_TOOLS),
ItemType(IC_MAGITEM,0,	STR_INFO_BRENNA_S_FAVOR,  				BRENNAS_FAVOR,					ItemEffects::BrennasFavor,		0,	-1, "BRENNA",STR_RELIC_DESC_BRENNAS_FAVOR),
ItemType(IC_MAGITEM,0,	STR_INFO_CHALICE_OF_THE_DEAD,			CHALICE_OF_THE_DEAD,			ItemEffects::ChaliceOfDead,		0,	-1, "CHALIC",STR_RELIC_DESC_CHALICE_OF_THE_DEAD),
ItemType(IC_MAGITEM,0,	STR_INFO_CROWN_OF_COMMAND, 				CROWN_OF_COMMAND,				ItemEffects::CrownOfCommand,	0,	-1, "CROWNC",STR_RELIC_DESC_CROWN_OF_COMMAND),
ItemType(IC_MAGITEM,0,	STR_INFO_STATE_CROWN_OF_ANUIRE,			STATE_CROWN_OF_ANUIRE,			ItemEffects::StateCrownAnnuire,	0,	-1, "CROWNA",STR_RELIC_DESC_STATE_CROWN_OF_ANUIRE),
ItemType(IC_MAGITEM,0,	STR_INFO_EMPEROR_S_CROWN,				EMPERORS_CROWN,					ItemEffects::EmperorsCrown,		0,	-1, "CROWNE",STR_RELIC_DESC_EMPERORS_CROWN),
ItemType(IC_MAGITEM,0,	STR_INFO_FARID_S_COFFER_OF_THE_REALM,	FARIDS_COFFER_OF_THE_REALM,		ItemEffects::FaridsCoffer,		0,	-1, "COFFER",STR_RELIC_DESC_FARIDS_COFFER_OF_THE_REALM),
ItemType(IC_MAGITEM,TARGET,	STR_INFO_HAMMER_OF_THUNDER,			HAMMER_OF_THUNDER,				ItemEffects::HammerOfThunder,	0,	-1,	"HAMMER",STR_RELIC_DESC_HAMMER_OF_THUNDER),
ItemType(IC_MAGITEM,0,	STR_INFO_RING_OF_WIZARDRY,				RING_OF_WIZARDRY,				ItemEffects::RingOfWizardry,	0,	-1,	"RING13",STR_RELIC_DESC_RING_OF_WIZARDRY),
ItemType(IC_MAGITEM,0,	STR_INFO_ROBES_OF_THE_MASSES,			ROBES_OF_THE_MASES,				ItemEffects::RobesOfMasses,		0,	-1,	"ROBESM",STR_RELIC_DESC_ROBES_OF_THE_MASES),
ItemType(IC_MAGITEM,0,	STR_INFO_REGALIA_OF_THE_EMPIRE,			REGALIA_OF_EMPIRE,				ItemEffects::RegaliaEmpire,		0,	-1,	"REGALI",STR_RELIC_DESC_REGALIA_OF_EMPIRE),
ItemType(IC_MAGITEM,0,	STR_INFO_SIELSHEGH_GEM_LARGE,			SIELSHEGH_GEM_LARGE,			ItemEffects::SielGemLarge,		0,	-1,	"SIELSL",STR_RELIC_DESC_SIELSHEGH_GEM_LARGE),
ItemType(IC_MAGITEM,0,	STR_INFO_SIELSHEGH_GEM_MEDIUM,			SIELSHEGH_GEM_MEDIUM,			ItemEffects::SielGemSmall,		0,	-1,	"SIELSM",STR_RELIC_DESC_SIELSHEGH_GEM_MEDIUM),
ItemType(IC_MAGITEM,0,	STR_INFO_SWORD_OF_ROELE,				SWORD_OF_ROELE,					ItemEffects::SwordOfRoele,		0,	-1,	"SWORDR",STR_RELIC_DESC_SWORD_OF_ROELE),
ItemType(IC_MAGITEM,TARGET | CHARGES,	STR_INFO_SCEPTER_OF_CUIRAECEN,		SCEPTRE_OF_CUIRAECEN,			ItemEffects::SceptreCuiraeecn,	0,	-1,	"SCEPTR",STR_RELIC_DESC_SCEPTRE_OF_CUIRAECEN),
ItemType(IC_MAGITEM,0,	STR_INFO_CORGANDALS_STAFF,				CORGANDALS_STAFF,				ItemEffects::Corgandal,			0,	-1,	"STAF04",STR_RELIC_DESC_CORGANDALS_STAFF),
ItemType(IC_MAGITEM,0,	STR_INFO_TOME_OF_WAR,					NAPPOLANS_TOME_OF_WAR,			ItemEffects::NappolansTome,		0,	-1,	"TOME02",STR_RELIC_DESC_NAPPOLANS_TOME_OF_WAR),
ItemType(IC_MAGITEM,0,	STR_INFO_BOOK_OF_FORTIFICATION,			VAUBENELS_BOOK_OF_FORTIFICATION,ItemEffects::VaubenelsBook,		0,	-1,	"BOOK03",STR_RELIC_DESC_VAUBENELS_BOOK_OF_FORTIFICATION),
ItemType(IC_MAGITEM,0,	STR_INFO_TORC_OF_SPLENDOR,				TORC_OF_SPLENDOR,				ItemEffects::TorcSplendor,		0,	-1,	"TORCSP",STR_RELIC_DESC_TORC_OF_SPLENDOR),
ItemType(IC_MAGITEM,0,	STR_INFO_DANICA_S_CRYSTAL_OF_SCRYING,	DANICAS_CRYSTAL_OF_SCRYING,		ItemEffects::Danica,			0,	-1,	"DANICA",STR_RELIC_DESC_DANICAS_CRYSTAL_OF_SCRYING),

ItemType(IC_MAGITEM,0,	-1,	TOME_OF_MYSTIC_MAGICS,			ItemEffects::TomeAddRandomSpells,	MAKE_ADD_SPELL(5,1,3)			,-1,"TOME03",STR_ITEM_DESC_TOME_OF_MYSTIC_MAGICS),
ItemType(IC_MAGITEM,0,	-1,	TOME_OF_SORCERORS_LORE,			ItemEffects::TomeAddRandomSpells,	MAKE_ADD_SPELL(3,4,6)			,-1,"TOME04",STR_ITEM_DESC_TOME_OF_SORCERER_LORE),
ItemType(IC_MAGITEM,0,	-1,	TOME_OF_THE_HIGH_WIZARDS,		ItemEffects::TomeAddRandomSpells,	MAKE_ADD_SPELL(1,7,9)			,-1,"TOME05",STR_ITEM_DESC_TOME_OF_HIGH_WIZARDS),
ItemType(IC_MAGITEM,0,	-1,	TOME_OF_THE_MAGE_LORDS,			ItemEffects::TomeAddRandomSpells,	MAKE_ADD_SPELL(5,0,0)|ADD_REALM	,-1,"TOME06",STR_ITEM_DESC_TOME_OF_MAGE_LORDS),



//Spells                              
//Ctor   Category   Atr ExtendedData                    		GameType                Effect								Arg                						Dur(in seconds) Icon  MiscInfo
//------|----------|---|---------------------------------------|-----------------------|-----------------------------------|---------------------------------------|---------------|-------|-----------------------------|
ItemType(IC_SPELL,	0,			SPELL_INFO::DETECT_MAGIC,		DETECT_MAGIC_1,			ItemEffects::MapHighlightMagic,		600, 									20|PER_LEVEL,	"SCRL06",STR_SPELL_DESC_DETECT_MAGIC),
ItemType(IC_SPELL,	0,			SPELL_INFO::FEATHER_FALL,		FEATHER_FALL_1,			ItemEffects::FeatherFall,			0,										10|PER_LEVEL,	"SCRL06",STR_ITEM_DESC_AMULET_OF_FEATHER_FALL),
ItemType(IC_SPELL,	0,			SPELL_INFO::JUMP,				JUMP_1,					ItemEffects::Jump,					0, 										10|PER_LEVEL,	"SCRL06",STR_SPELL_DESC_JUMP),
ItemType(IC_SPELL,	0,			SPELL_INFO::LIGHT,				LIGHT_1,				ItemEffects::SeeInDark,				0, 										100|PER_LEVEL,	"SCRL06",STR_SPELL_DESC_LIGHT),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::MAGIC_MISSILE,		MAGIC_MISSILE_1,		ItemEffects::MagicMissileSpell,		AT_MISSILE|USE_LEVEL|MAKE_DICE(1,4,0),	-1,				"SCRL06",STR_SPELL_DESC_MAGIC_MISSILE),
ItemType(IC_SPELL,	0,			SPELL_INFO::REDUCE,				REDUCE_1,				ItemEffects::Shrink,				50,										50|PER_LEVEL,	"SCRL06",STR_SPELL_DESC_REDUCE),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::SHOCKING_GRASP,		SHOCKING_GRASP_1,		ItemEffects::ShockingGrasp,			0, 										-1,				"SCRL06",STR_SPELL_DESC_SHOCKING_GRASP),
ItemType(IC_SPELL,	0,			SPELL_INFO::BLINDNESS,			BLINDNESS_1,			ItemEffects::Blindness,				0, 										100,		 	"SCRL06",STR_SPELL_DESC_BLINDNESS),
ItemType(IC_SPELL,	0,			SPELL_INFO::CONTINUAL_LIGHT,	CONTINUAL_LIGHT_1,		ItemEffects::SeeInDark,				0, 										24000,			"SCRL06",STR_SPELL_DESC_CONTINUAL_LIGHT),
ItemType(IC_SPELL,	0,			SPELL_INFO::KNOCK,				KNOCK_1,				ItemEffects::Knock,					0, 										-1,				"SCRL06",STR_SPELL_DESC_KNOCK),
ItemType(IC_SPELL,	0,			SPELL_INFO::LEVITATE,			LEVITATE_1,				ItemEffects::Levitate,				0, 										20|PER_LEVEL,	"SCRL06",STR_SPELL_DESC_LEVITATE),	
ItemType(IC_SPELL,	0,			SPELL_INFO::LOCATE_OBJECT,		LOCATE_OBJECT_1,		ItemEffects::LocateObject,			0, 										20|PER_LEVEL,	"SCRL06",STR_SPELL_DESC_LOCATE_OBJECT),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::POISON_ARROW,		POISON_ARROW_1,			ItemEffects::HurlFireBall,			AT_MISSILE|USE_LEVEL|MAKE_DICE(1,4,0),	-1,				"SCRL06",STR_SPELL_DESC_POISON_ARROW),
ItemType(IC_SPELL,	0,			SPELL_INFO::STRENGTH,			STRENGTH_1,				ItemEffects::TouchSpell,			0, 										100|PER_LEVEL,	"SCRL06",STR_SPELL_DESC_STRENGTH),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::FIREBALL,			FIREBALL_1,				ItemEffects::HurlFireBall,			AT_FIRE|USE_LEVEL|MAKE_DICE(1,6,0),		-1,				"SCRL06",STR_SPELL_DESC_FIREBALL),
ItemType(IC_SPELL,	0,			SPELL_INFO::FLY,				FLY_1,					ItemEffects::Flight,				USE_LEVEL,								100|PER_LEVEL,	"SCRL06",STR_SPELL_DESC_FLY),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::STONE_UNDEAD,		STONE_UNDEAD_1,			ItemEffects::StoneUndead,			0, 										30|PER_LEVEL,	"SCRL06",STR_SPELL_DESC_STONE_UNDEAD),
ItemType(IC_SPELL,	0,			SPELL_INFO::INFRAVISION,		INFRAVISION_1,			ItemEffects::ActInfravision,		0, 										1000|PER_LEVEL,	"SCRL06",STR_SPELL_DESC_INFRAVISION),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::LIGHTNING_BOLT,		LIGHTNING_BOLT_1,		ItemEffects::HurlFireBall,			AT_LIGHTNING|USE_LEVEL|MAKE_DICE(1,6,0),-1,				"SCRL06",STR_SPELL_DESC_LIGHTNING_BOLT),
ItemType(IC_SPELL,	0,			SPELL_INFO::CONFUSION,			CONFUSION_1,			ItemEffects::Confusion,				0, 										20|PER_LEVEL,	"SCRL06",STR_SPELL_DESC_CONFUSION),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::ICE_STORM,			ICE_STORM_1,			ItemEffects::HurlFireBall,			AT_PLASMA|MAKE_DICE(1,6,0),				-1,				"SCRL06",STR_SPELL_DESC_ICE_STORM),
ItemType(IC_SPELL,	0,			SPELL_INFO::MINOR_GLOBE_INVULN,	MINOR_GLOBE_INVULN_1,	ItemEffects::GlobeInvulnerability,	GLOBE_MINOR,							30|PER_LEVEL,	"SCRL06",STR_SPELL_DESC_MINOR_GLOBE_INVULN),
ItemType(IC_SPELL,	0,			SPELL_INFO::STONESKIN,			STONESKIN_1,			ItemEffects::StoneSkin,				0, 										40|PER_LEVEL,	"SCRL06",STR_SPELL_DESC_STONESKIN),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::CONE_OF_COLD,		CONE_OF_COLD_1,			ItemEffects::ConeOfColdSpell,		AT_PLASMA|USE_LEVEL|MAKE_DICE(1,4,2),	-1,				"SCRL06",STR_SPELL_DESC_CONE_OF_COLD),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::DISINTIGRATE,		DISINTIGRATE_1,			ItemEffects::Disintigrate,			0,	 									-1,				"SCRL06",STR_SPELL_DESC_DISINTIGRATE),
ItemType(IC_SPELL,	0,			SPELL_INFO::TELEPORT,			TELEPORT_1,				ItemEffects::MapTeleport,			0,				 						-1,				"SCRL06",STR_SPELL_DESC_MAP_TELEPORT),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::CHAIN_LIGHTNING,	CHAIN_LIGHTNING_1,		ItemEffects::ChainLightningSpell,	AT_LIGHTNING|USE_LEVEL|MAKE_DICE(1,6,0),-1,				"SCRL06",STR_SPELL_DESC_CHAIN_LIGHTNING),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::DEATH,				DEATH_1,				ItemEffects::DeathSpell,			0,										-1,				"SCRL06",STR_SPELL_DESC_DEATH),
ItemType(IC_SPELL,	0,			SPELL_INFO::GLOBE_INVULN,		GLOBE_INVULN_1,			ItemEffects::GlobeInvulnerability,	GLOBE_MAJOR,							20|PER_LEVEL,	"SCRL06",STR_SPELL_DESC_GLOBE_INVULN),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::FLESH_TO_STONE,		FLESH_TO_STONE_1,		ItemEffects::FleshToStone,			0, 										-1,				"SCRL06",STR_SPELL_DESC_FLESH_TO_STONE),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::IMPROVED_FIREBAL,	IMPROVED_FIREBAL_1,		ItemEffects::ImprovedFireball,		0, 										-1,				"SCRL06",STR_SPELL_DESC_IMPROVED_FIREBAL),
ItemType(IC_SPELL,	0,			SPELL_INFO::POWER_STUN,			POWER_STUN_1,			ItemEffects::Confusion,				0, 										100,			"SCRL06",STR_SPELL_DESC_POWER_STUN),
ItemType(IC_SPELL,	0,			SPELL_INFO::POWER_BLIND,		POWER_BLIND_1,			ItemEffects::PowerBlindSpell,		MAKE_DICE(1,6,0),						100,			"SCRL06",STR_SPELL_DESC_POWER_BLIND),
ItemType(IC_SPELL,	0,			SPELL_INFO::SPELL_IMMUNITY,		SPELL_IMMUNITY_1,		ItemEffects::SpellImmunity,			0, 										20|PER_LEVEL,	"SCRL06",STR_SPELL_DESC_SPELL_IMMUNITY),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::METEOR_SWARM,		METEOR_SWARM_1,			ItemEffects::MeteorSwarmSpell,		MAKE_DICE(1,6,0),						-1,				"SCRL06",STR_SPELL_DESC_METEOR_SWARM),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::POWER_KILL,			POWER_KILL_1,			ItemEffects::PowerKillSpell,		MAKE_DICE(1,6,0),						-1,				"SCRL06",STR_SPELL_DESC_POWER_KILL),
ItemType(IC_SPELL,	0,			SPELL_INFO::TIME_STOP,			TIME_STOP_1,			ItemEffects::TimeStopSpell,			MAKE_DICE(1,6,0),						-1,				"SCRL06",STR_SPELL_DESC_TIME_STOP),

ItemType(IC_SPELL,	0,			SPELL_INFO::CURE_LIGHT,			CURE_LIGHT_1,			ItemEffects::TouchSpell,			HEAL_RANDOM|MAKE_DICE(1,8,0), 			-1,				"SCRL07",STR_SPELL_DESC_CURE_LIGHT),
ItemType(IC_SPELL,	0,			SPELL_INFO::DETECT_EVIL,		DETECT_EVIL_1,			ItemEffects::MapHighlightEvil,		600,									20|PER_LEVEL,	"SCRL07",STR_SPELL_DESC_DETECT_EVIL),
ItemType(IC_SPELL,	0,			SPELL_INFO::DETECT_MAGIC_PR,	DETECT_MAGIC_PR_1,		ItemEffects::MapHighlightMagic,		600,									20|PER_LEVEL,	"SCRL07",STR_SPELL_DESC_DETECT_MAGIC_PR),
ItemType(IC_SPELL,	0,			SPELL_INFO::LIGHT_PR,			LIGHT_PR_1,				ItemEffects::SeeInDark,				0, 										100|PER_LEVEL,	"SCRL07",STR_SPELL_DESC_LIGHT_PR),
ItemType(IC_SPELL,	0,			SPELL_INFO::SHILLELAGH,			SHILLELAGH_1,			ItemEffects::Shillelagh,			0, 										20|PER_LEVEL,	"SCRL07",STR_SPELL_DESC_SHILLELAGH),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::TURN_UNDEAD,		TURN_UNDEAD_1,			ItemEffects::UndeadTurn,			MAKE_DICE(6,6,0), 						-1,				"SCRL07",STR_SPELL_DESC_TURN_UNDEAD),
ItemType(IC_SPELL,	0,			SPELL_INFO::BARKSKIN,			BARKSKIN_1,				ItemEffects::BarkSkin,				0, 										40|PER_LEVEL,	"SCRL07",STR_SPELL_DESC_BARKSKIN),
ItemType(IC_SPELL,	0,			SPELL_INFO::FIND_TRAPS,			FIND_TRAPS_1,			ItemEffects::MapHighlightTraps,		600,									20|PER_LEVEL,	"SCRL07",STR_SPELL_DESC_FIND_TRAPS),
ItemType(IC_SPELL,	0,			SPELL_INFO::FIND_TREASURE,		FIND_TREASURE_1,		ItemEffects::MapHighlightTreasure,	600,									20|PER_LEVEL,	"SCRL07",STR_SPELL_DESC_FIND_TREASURE),
ItemType(IC_SPELL,	0,			SPELL_INFO::RESIST_FIRE,		RESIST_FIRE_1,			ItemEffects::ActResistance,			_RESIST_FIRE,							20|PER_LEVEL,	"SCRL07",STR_SPELL_DESC_RESIST_FIRE),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::SPIRITUAL_HAMMER,	SPIRITUAL_HAMMER_1,		ItemEffects::SpritualHammer,		0, 										-1,				"SCRL07",STR_SPELL_DESC_SPIRITUAL_HAMMER),
ItemType(IC_SPELL,	0,			SPELL_INFO::MAGICAL_VESTAMENT,	MAGICAL_VESTAMENT_1,	ItemEffects::MagicalVestement,		0, 										40|PER_LEVEL,	"SCRL07",STR_SPELL_DESC_MAGICAL_VESTAMENT),
ItemType(IC_SPELL,	0,			SPELL_INFO::WATER_WALK,			WATER_WALK_1,			ItemEffects::SeeInDark,				0, 										24000,			"SCRL07",STR_SPELL_DESC_CONTINUAL_LIGHT),
ItemType(IC_SPELL,	0,			SPELL_INFO::CURE_SERIOUS,		CURE_SERIOUS_1,			ItemEffects::TouchSpell,			HEAL_RANDOM|MAKE_DICE(2,8,1), 			-1,				"SCRL07",STR_SPELL_DESC_CURE_SERIOUS),
ItemType(IC_SPELL,	0,			SPELL_INFO::PROT_FROM_EVIL,		PROT_FROM_EVIL_1,		ItemEffects::ProtectionFromEvil,	0, 										20|PER_LEVEL,	"SCRL07",STR_SPELL_DESC_PROT_FROM_EVIL),
ItemType(IC_SPELL,	0,			SPELL_INFO::CURE_CRITICAL,		CURE_CRITICAL_1,		ItemEffects::TouchSpell,			HEAL_RANDOM|MAKE_DICE(3,8,3), 			-1,				"SCRL07",STR_SPELL_DESC_CURE_CRITICAL),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::FLAME_STRIKE,		FLAME_STRIKE_1,			ItemEffects::FlameStrike,			0, 										-1,				"SCRL07",STR_SPELL_DESC_FLAME_STRIKE),
ItemType(IC_SPELL,	0,			SPELL_INFO::TRUE_SEEING,		TRUE_SEEING_1,			ItemEffects::MapShowAll,			0,										20|PER_LEVEL,	"SCRL07",STR_SPELL_DESC_SHOW_ALL_MAP),
ItemType(IC_SPELL,	0,			SPELL_INFO::HEAL,				HEAL_1,					ItemEffects::TouchSpell,			HEAL_FULLY, 							-1,				"SCRL07",STR_SPELL_DESC_HEAL),
ItemType(IC_SPELL,	TARGETWAVE,	SPELL_INFO::FIRE_STORM,			FIRE_STORM_1,			ItemEffects::HurlFireBall,			AT_FIRE|USE_LEVEL|MAKE_DICE(1,8,0),		-1,				"SCRL07",STR_SPELL_DESC_FIRE_STORM),
ItemType(IC_SPELL,	0,			SPELL_INFO::HOLY_WORD,			HOLY_WORD_1,			ItemEffects::HolyWordSpell,			MAKE_DICE(1,6,0),						-1,				"SCRL07",STR_SPELL_DESC_HOLY_WORD),
ItemType(IC_SPELL,	0,			SPELL_INFO::RESURRECTION,		RESURRECTION_1,			ItemEffects::Resurrection,			0, 										-1,				"SCRL07",STR_SPELL_DESC_RESURRECTION),		


// Wizard Realm Spells																																									  
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::ALCHEMY,				REALM_ALCHEMY_1,			ItemEffects::RealmGeneric,	0,		    -1 ,"TOME06",STR_REALM_SPELL_DESC_ALCHEMY),
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::DEATH_PLAGUE,			REALM_DEATH_PLAGUE_1,		ItemEffects::RealmGeneric,	0,		    -1 ,"TOME06",STR_REALM_SPELL_DESC_DEATH_PLAGUE),
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::DEMAGOGUE,			REALM_DEMAGOGUE_1,			ItemEffects::RealmGeneric,	0,		    -1 ,"TOME06",STR_REALM_SPELL_DESC_DEMAGOGUE),
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::DISPEL_REALM_MAGIC,	REALM_DISPEL_REALM_MAGIC_1,	ItemEffects::RealmGeneric,	0,		    -1 ,"TOME06",STR_REALM_SPELL_DESC_DISPEL_REALM_MAGIC),
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::LEGION_OF_DEAD,		REALM_LEGION_OF_DEAD_1,		ItemEffects::RealmGeneric,	0,		    -1 ,"TOME06",STR_REALM_SPELL_DESC_LEGION_OF_DEAD),
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::MASS_DESTRUCTION,		REALM_MASS_DESTRUCTION_1,	ItemEffects::RealmGeneric,	0,		    -1 ,"TOME06",STR_REALM_SPELL_DESC_MASS_DESTRUCTION),
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::RAZE,					REALM_RAZE_1,				ItemEffects::RealmGeneric,	0,		    -1 ,"TOME06",STR_REALM_SPELL_DESC_RAZE),
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::SCRY,					REALM_SCRY_1,				ItemEffects::RealmGeneric,	0,		    -1 ,"TOME06",STR_REALM_SPELL_DESC_SCRY),
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::STRONGHOLD,			REALM_STRONGHOLD_1,			ItemEffects::RealmGeneric,	0,		    -1 ,"TOME06",STR_REALM_SPELL_DESC_STRONGHOLD),
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::SUMMONING,			REALM_SUMMONING_1,			ItemEffects::RealmGeneric,	0,		    -1 ,"TOME06",STR_REALM_SPELL_DESC_SUMMONING),
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::TRANSPORT,			REALM_TRANSPORT_1,			ItemEffects::RealmGeneric,	0,		    -1 ,"TOME06",STR_REALM_SPELL_DESC_TRANSPORT),
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::WARDING,				REALM_WARDING_1,			ItemEffects::RealmGeneric,	0,		    -1 ,"TOME06",STR_REALM_SPELL_DESC_WARDING),
						  	
// Priest Realm Spells
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::BLESS_LAND,			REALM_BLESS_LAND_1,			ItemEffects::RealmGeneric,	0,		    -1 ,"SCRL08",STR_REALM_SPELL_DESC_BLESS_LAND),
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::BLESS_ARMY,			REALM_BLESS_ARMY_1,			ItemEffects::RealmGeneric,	0,		    -1 ,"SCRL08",STR_REALM_SPELL_DESC_BLESS_ARMY),
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::BLIGHT,				REALM_BLIGHT_1,				ItemEffects::RealmGeneric,	0,		    -1 ,"SCRL08",STR_REALM_SPELL_DESC_BLIGHT),
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::DISPEL_REALM_MAGIC_PRIESTVER,	REALM_DISPEL_REALM_MAGIC_1,	ItemEffects::RealmGeneric,	0,	-1 ,"SCRL08",STR_REALM_SPELL_DESC_DISPEL_REALM_MAGIC),
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::HONEST_DEALING,		REALM_HONEST_DEALING_1,		ItemEffects::RealmGeneric,	0,		    -1 ,"SCRL08",STR_REALM_SPELL_DESC_HONEST_DEALING),
ItemType(IC_REALM_SPELL,  0,	REALM_SPELL_INFO::INVESTITURE,			REALM_INVESTITURE_1,		ItemEffects::RealmGeneric,	0,		    -1 ,"SCRL08",STR_REALM_SPELL_DESC_INVESTITURE),


//Blood Abilities
//Ctor   Category   Atr ExtendedData                            	GameType    					Effect                           Arg  Dur IconFileName   MiscInfo
//------|----------|---|-------------------------------------------|-------------------------------|--------------------------------|----|---|-------------|--------|
ItemType(IC_BLOODAB,0,	BLOOD_ABILITY_INFO::BATTLEWISE,				BLOOD_BATTLEWISE_1,				ItemEffects::BABattleWise,       0,   -1, "BLOD02",		STR_BLOODAB_DESC_BATTLEWISE),
ItemType(IC_BLOODAB,0,	BLOOD_ABILITY_INFO::COURAGE,				BLOOD_COURAGE_1,				ItemEffects::BACourage,          0,   -1, "BLOD03",		STR_BLOODAB_DESC_COURAGE),
ItemType(IC_BLOODAB,0,	BLOOD_ABILITY_INFO::DEVINE_WRATH,			BLOOD_DIVINE_WRATH_1,			ItemEffects::BADevineWrath,      0,   -1, "BLOD02",		STR_BLOODAB_DESC_DEVINEWRATH),
ItemType(IC_BLOODAB,0,	BLOOD_ABILITY_INFO::HEIGHTENED_ABILITY,		BLOOD_HEIGHTENED_ABILITY_1,		ItemEffects::BAHeightendAbility, 0,   -1, "BLOD03",		STR_BLOODAB_DESC_HEIGHTENDAB),
ItemType(IC_BLOODAB,0,	BLOOD_ABILITY_INFO::BLOODMARK,				BLOOD_BLOODMARK_1,				ItemEffects::BABloodMark,        0,   -1, "BLOD03",		STR_BLOODAB_DESC_BLOODMARK),
ItemType(IC_BLOODAB,0,	BLOOD_ABILITY_INFO::DETECT_ILLUSION,		BLOOD_DETECT_ILLUSION_1,		ItemEffects::BADetectIllusion  ,0,   -1, "BLOD03",		STR_BLOODAB_DESC_DETECT_ILLUSION),
ItemType(IC_BLOODAB,0,	BLOOD_ABILITY_INFO::DIVINE_AURA,			BLOOD_DIVINE_AURA_1,			ItemEffects::BADivineAura,       0,   -1, "BLOD02",		STR_BLOODAB_DESC_DIVINE_AURA),
ItemType(IC_BLOODAB,CHARGES,	BLOOD_ABILITY_INFO::ENHANCED_SENSE,			BLOOD_ENHANCED_SENSE_1,			ItemEffects::BAEnhancedSense,    0,   -1, "BLOD03",		STR_BLOODAB_DESC_ENHANCED_SENSE),
ItemType(IC_BLOODAB,CHARGES,	BLOOD_ABILITY_INFO::FEAR,					BLOOD_FEAR_1,					ItemEffects::BAFear,             0,   -1, "BLOD02",		STR_BLOODAB_DESC_FEAR),
ItemType(IC_BLOODAB,CHARGES,	BLOOD_ABILITY_INFO::HEALING_MINOR,			BLOOD_HEALING_1,				ItemEffects::BAHealing,          BAMINOR,-1,"BLOD02",	STR_BLOODAB_DESC_HEALING),
ItemType(IC_BLOODAB,CHARGES,	BLOOD_ABILITY_INFO::HEALING_MAJOR,			BLOOD_HEALING_1,				ItemEffects::BAHealing,          BAMAJOR,-1,"BLOD02",	STR_BLOODAB_DESC_HEALING),
ItemType(IC_BLOODAB,CHARGES,	BLOOD_ABILITY_INFO::HEALING_GREAT,			BLOOD_HEALING_1,				ItemEffects::BAHealing,          BAGREAT,-1,"BLOD02",	STR_BLOODAB_DESC_HEALING),
ItemType(IC_BLOODAB,0,	BLOOD_ABILITY_INFO::IRON_WILL,				BLOOD_IRON_WILL_1,				ItemEffects::BAIronWill,         0,   -1, "BLOD03",		STR_BLOODAB_DESC_IRON_WILL),
ItemType(IC_BLOODAB,CHARGES,	BLOOD_ABILITY_INFO::PROTECTION_FROM_EVIL,	BLOOD_PROTECTION_FROM_EVIL_1,	ItemEffects::BAProtectionEvil,   0,   INDEFINATE_DUR, "BLOD02",		STR_BLOODAB_DESC_PROTECTION_FROM_EVIL),
ItemType(IC_BLOODAB,0,	BLOOD_ABILITY_INFO::REGENERATION,			BLOOD_REGENERATION_1,			ItemEffects::BARegeneration,     0,  -1, "BLOD01",		STR_BLOODAB_DESC_REGENERATION),
ItemType(IC_BLOODAB,0,	BLOOD_ABILITY_INFO::RESISTANCE,				BLOOD_RESISTANCE_1,				ItemEffects::BAResistance,       0,   -1, "BLOD02",		STR_BLOODAB_DESC_RESISTANCE),
ItemType(IC_BLOODAB,CHARGES,	BLOOD_ABILITY_INFO::TRAVEL,					BLOOD_TRAVEL_1,					ItemEffects::BATravel,           0,   -1, "BLOD01",		STR_BLOODAB_DESC_TRAVEL),

// Stuff that no longer fits above.

ItemType(IC_MUNDANE,0,	-1,	GOLD_COINS_1,  ItemEffects::GoldCoins,  50, 0,  "I_BLANK",		STR_ITEM_DESC_GOLD_1),
ItemType(IC_MUNDANE,0,	-1,	GOLD_COINS_2,  ItemEffects::GoldCoins, 150, 0,  "I_BLANK",		STR_ITEM_DESC_GOLD_1),
ItemType(IC_MUNDANE,0,	-1,	GOLD_COINS_3,  ItemEffects::GoldCoins,  50, 0,  "I_BLANK",		STR_ITEM_DESC_GOLD_1),
ItemType(IC_MUNDANE,0,	-1,	GOLD_COINS_4,  ItemEffects::GoldCoins, 150, 0,  "I_BLANK",		STR_ITEM_DESC_GOLD_1),
ItemType(IC_MUNDANE,0,	-1,	GOLD_COINS_5,  ItemEffects::GoldCoins, 500, 0,  "I_BLANK",		STR_ITEM_DESC_GOLD_1),
ItemType(IC_MUNDANE,0,	-1,	TREASURE_CHEST,ItemEffects::GoldCoins,2000, 0,  "I_BLANK",		STR_ITEM_DESC_TREASURE_CHEST),

// special war bonus
ItemType(IC_MAGITEM,0,	-1,	GORGONS_BANNER,		ItemEffects::None,	0, 0,	"gorghd",		STR_ITEM_GORGONS_BANNER),

// rescued captives
ItemType(IC_MUNDANE,0,	-1,	ENDAERAL_CATHBIRN,	ItemEffects::Rescuee,  0, 0,	"LORDM1",		STR_ITEM_DESC_CAPTIVE_1),
ItemType(IC_MUNDANE,0,	-1,	TIESKAR_GRAECHER,	ItemEffects::Rescuee,  0, 0,	"GLORD1",		STR_ITEM_DESC_CAPTIVE_2),

// extra relics
ItemType(IC_MAGITEM,0,	-1,	IOUN_HEART,			ItemEffects::AddToAttribute,	AT_ALL|1,			180,"IOUN11", STR_ITEM_DESC_IOUN_HEART),
ItemType(IC_MAGITEM,0,	-1,	IOUN_FIST,			ItemEffects::AddToAttribute,	AT_LEV|2,			180,"IOUN07", STR_ITEM_DESC_IOUN_FIST),
ItemType(IC_MAGITEM,0,	-1,	TOME_OF_THE_PRINCE,	ItemEffects::TomePrince,		0,					0,  "TOME01", STR_RELIC_DESC_TOME_OF_THE_PRINCE),


//fix for charges bug
ItemType(IC_MAGITEM,TARGET,	-1,	NECKLACE_OF_MISSILES_7,		ItemEffects::HurlFireBall,				AT_FIRE|MAKE_DICE(2,6,0),					0,	"NECKMI",STR_ITEM_DESC_NECKLACE_OF_MISSILES),
ItemType(IC_MAGITEM,TARGET,	-1,	NECKLACE_OF_MISSILES_6,		ItemEffects::HurlFireBall,				AT_FIRE|MAKE_DICE(2,6,0),					0,	"NECKMI",STR_ITEM_DESC_NECKLACE_OF_MISSILES),
ItemType(IC_MAGITEM,TARGET,	-1,	NECKLACE_OF_MISSILES_5,		ItemEffects::HurlFireBall,				AT_FIRE|MAKE_DICE(2,6,0),					0,	"NECKMI",STR_ITEM_DESC_NECKLACE_OF_MISSILES),
ItemType(IC_MAGITEM,TARGET,	-1,	NECKLACE_OF_MISSILES_4,		ItemEffects::HurlFireBall,				AT_FIRE|MAKE_DICE(2,6,0),					0,	"NECKMI",STR_ITEM_DESC_NECKLACE_OF_MISSILES),
ItemType(IC_MAGITEM,TARGET,	-1,	NECKLACE_OF_MISSILES_3,		ItemEffects::HurlFireBall,				AT_FIRE|MAKE_DICE(2,6,0),					0,	"NECKMI",STR_ITEM_DESC_NECKLACE_OF_MISSILES),
ItemType(IC_MAGITEM,TARGET,	-1,	NECKLACE_OF_MISSILES_2,		ItemEffects::HurlFireBall,				AT_FIRE|MAKE_DICE(2,6,0),					0,	"NECKMI",STR_ITEM_DESC_NECKLACE_OF_MISSILES),
ItemType(IC_MAGITEM,TARGET,	-1,	NECKLACE_OF_MISSILES_1,		ItemEffects::HurlFireBall,				AT_FIRE|MAKE_DICE(2,6,0),					0,	"NECKMI",STR_ITEM_DESC_NECKLACE_OF_MISSILES),
ItemType(IC_MAGITEM,0,		-1,	WAND_OF_ENEMY_DETECTION_2,	ItemEffects::MapHighlightEnemies,		600,										60,	"WAND01",STR_ITEM_DESC_WAND_OF_ENEMY_DETECTION),
ItemType(IC_MAGITEM,0,		-1,	WAND_OF_ENEMY_DETECTION_1,	ItemEffects::MapHighlightEnemies,		600,										60,	"WAND01",STR_ITEM_DESC_WAND_OF_ENEMY_DETECTION),
ItemType(IC_MAGITEM,TARGET,	-1, WAND_OF_FIRE_2,				ItemEffects::HurlFireBall,				CLASS_RESTRICTED|AT_FIRE|MAKE_DICE(6,6,0),	0,	"WAND03",STR_ITEM_DESC_WAND_OF_FIRE),
ItemType(IC_MAGITEM,TARGET,	-1, WAND_OF_FIRE_1,				ItemEffects::HurlFireBall,				CLASS_RESTRICTED|AT_FIRE|MAKE_DICE(6,6,0),	0,	"WAND03",STR_ITEM_DESC_WAND_OF_FIRE),
ItemType(IC_MAGITEM,TARGET,	-1, WAND_OF_FROST_2,			ItemEffects::FrostCone,					CLASS_RESTRICTED|MAKE_DICE(6,6,0),			0,	"WAND05",STR_ITEM_DESC_WAND_OF_FROST),
ItemType(IC_MAGITEM,TARGET,	-1, WAND_OF_FROST_1,			ItemEffects::FrostCone,					CLASS_RESTRICTED|MAKE_DICE(6,6,0),			0,	"WAND05",STR_ITEM_DESC_WAND_OF_FROST),
ItemType(IC_MAGITEM,0,		-1,	WAND_OF_ILLUMINATION_2,		ItemEffects::SeeInDark,					0,											180,"WAND06",STR_ITEM_DESC_WAND_OF_ILLUMINATION),
ItemType(IC_MAGITEM,0,		-1,	WAND_OF_ILLUMINATION_1,		ItemEffects::SeeInDark,					0,											180,"WAND06",STR_ITEM_DESC_WAND_OF_ILLUMINATION),
ItemType(IC_MAGITEM,TARGET,	-1, WAND_OF_LIGHTNING_2,		ItemEffects::ElectricalBolt,			CLASS_RESTRICTED|MAKE_DICE(6,6,0),			0,	"WAND07",STR_ITEM_DESC_WAND_OF_LIGHTNING),
ItemType(IC_MAGITEM,TARGET,	-1, WAND_OF_LIGHTNING_1,		ItemEffects::ElectricalBolt,			CLASS_RESTRICTED|MAKE_DICE(6,6,0),			0,	"WAND07",STR_ITEM_DESC_WAND_OF_LIGHTNING),
ItemType(IC_MAGITEM,0,		-1,	WAND_OF_MAGIC_DETECTION_2,	ItemEffects::MapHighlightMagic,			600,										60,	"WAND08",STR_ITEM_DESC_WAND_OF_MAGIC_DETECTION),
ItemType(IC_MAGITEM,0,		-1,	WAND_OF_MAGIC_DETECTION_1,	ItemEffects::MapHighlightMagic,			600,										60,	"WAND08",STR_ITEM_DESC_WAND_OF_MAGIC_DETECTION),
ItemType(IC_MAGITEM,TARGET,	-1, WAND_OF_PARALYZATION_2,		ItemEffects::ParalyzeAllInRad,			CLASS_RESTRICTED|60,						0,	"WAND09",STR_ITEM_DESC_WAND_OF_PARALYZATION),
ItemType(IC_MAGITEM,TARGET,	-1, WAND_OF_PARALYZATION_1,		ItemEffects::ParalyzeAllInRad,			CLASS_RESTRICTED|60,						0,	"WAND09",STR_ITEM_DESC_WAND_OF_PARALYZATION),
ItemType(IC_MAGITEM,0,		-1,	WAND_OF_SECRET_DETECTION_2,	ItemEffects::MapHighlightSecretDoors,	600,										60,	"WAND10",STR_ITEM_DESC_WAND_OF_SECRET_DETECTION),
ItemType(IC_MAGITEM,0,		-1,	WAND_OF_SECRET_DETECTION_1,	ItemEffects::MapHighlightSecretDoors,	600,										60,	"WAND10",STR_ITEM_DESC_WAND_OF_SECRET_DETECTION),

// new abilities
ItemType(IC_BLOODAB,TARGETWAVE,	-1,	TURN_UNDEAD_1,			ItemEffects::TouchSpell,	USE_LEVEL, 							-1,				"SCRL07",STR_SPELL_DESC_TURN_UNDEAD),

ItemType(IC_BLOODAB,		0,	-1,	CURE_CRITICAL_1,		ItemEffects::TouchSpell,	HEAL_ABSOLUT|USE_LEVEL|2, 			-1,				"SCRL07",STR_SPELL_DESC_CURE_CRITICAL),

};

DEFINE_VECTOR_CLASS(ItemType, ItemTypes);



#define NUMBER_OF_CHARGED_CHAIN 10
DEFINE_VECTOR_MEMBER_DATA_S(ItemChargeHandler::ChargedItemChain,ItemChargeHandler,ChargeDegradeTable, 10)=
{
ItemChargeHandler::ChargedItemChain(8,ITEM_NECKLACE_OF_MISSILES_8,ITEM_NECKLACE_OF_MISSILES_7,ITEM_NECKLACE_OF_MISSILES_6,ITEM_NECKLACE_OF_MISSILES_5,ITEM_NECKLACE_OF_MISSILES_4,ITEM_NECKLACE_OF_MISSILES_3,ITEM_NECKLACE_OF_MISSILES_2,ITEM_NECKLACE_OF_MISSILES_1),
ItemChargeHandler::ChargedItemChain(3,ITEM_WAND_OF_ENEMY_DETECTION_3,ITEM_WAND_OF_ENEMY_DETECTION_2,ITEM_WAND_OF_ENEMY_DETECTION_1),
ItemChargeHandler::ChargedItemChain(3,ITEM_WAND_OF_FIRE_3,ITEM_WAND_OF_FIRE_2,ITEM_WAND_OF_FIRE_1),
ItemChargeHandler::ChargedItemChain(3,ITEM_WAND_OF_FROST_3,ITEM_WAND_OF_FROST_2,ITEM_WAND_OF_FROST_1),
ItemChargeHandler::ChargedItemChain(3,ITEM_WAND_OF_ILLUMINATION_3,ITEM_WAND_OF_ILLUMINATION_2,ITEM_WAND_OF_ILLUMINATION_1),
ItemChargeHandler::ChargedItemChain(3,ITEM_WAND_OF_LIGHTNING_3,ITEM_WAND_OF_LIGHTNING_2,ITEM_WAND_OF_LIGHTNING_1),
ItemChargeHandler::ChargedItemChain(3,ITEM_WAND_OF_MAGIC_DETECTION_3,ITEM_WAND_OF_MAGIC_DETECTION_2,ITEM_WAND_OF_MAGIC_DETECTION_1),
ItemChargeHandler::ChargedItemChain(3,ITEM_WAND_OF_PARALYZATION_3,ITEM_WAND_OF_PARALYZATION_2,ITEM_WAND_OF_PARALYZATION_1),
ItemChargeHandler::ChargedItemChain(3,ITEM_WAND_OF_SECRET_DETECTION_3,ITEM_WAND_OF_SECRET_DETECTION_2,ITEM_WAND_OF_SECRET_DETECTION_1),
ItemChargeHandler::ChargedItemChain(0), //marks the end of the list
};
DEFINE_VECTOR_MEMBER_CLASS(ItemChargeHandler::ChargedItemChain, ItemChargeHandler,ChargeDegradeTable);

//LONG ItemChargeHandler::NumChargedItems=sizeof(ItemChargeHandler::ChargeDegradeTable)/sizeof(ItemChargeHandler::ChargedItemChain);
LONG ItemChargeHandler::NumChargedItems=NUMBER_OF_CHARGED_CHAIN;




/* ------------------------------------------------------------------------
   EFFECT FUNCTIONS
   ------------------------------------------------------------------------ */


LONG ItemEffects::RealmGeneric(LONG Combo,LONG Arg,LONG Action)
{Arg=Combo;Combo=Action;Action=Arg;return 0;}
//this function is a helper for a coder trying to implement magic items.


LONG ItemEffects::Template(LONG Combo, LONG Arg, LONG Action)
{
	//Combo has the ItemType as it's upper word, and the avatar who's
	//activating the item as the lower word
	
	//Arg is a "free" argument, it is passed in from the array (see above)
	//it is passed in from the ItemTypes array

	//Action is what is happening to the item when this is called...
	//SERVICE means it's being serviced (once per frame)
	//EQUIP means it's being inserted into the spell boxes
	//UNEQUIP means it's being taken from the spell boxes
	//PICKUP means it's being picked up out of the wad.
	//DROP means it's being dropped back into the wad.
	//ACTIVATE means it's being used (invoked)
	//DEACTIVATE means it's duration has run out and it is deactivating
	//etc...


	SHORT Itemtype;  				//the index in ItemTypes of the Item 
									//being activated
	SHORT hPlayerStats;   			//the stats of the avatar who's activating 
									//the item
 	SPLIT_COMBO(Combo,Itemtype,hPlayerStats); //extract the data from the Combo

	ItemType& Item=ItemTypes[Itemtype]; //A reference to the item

	// Note: Don't access these handles unless you can guarentee that there will
	//	     be either an avatar or a stats structure active.
	//       Generally copy them into the part of the code which needs them.
	// PLAYER_STATS	*const pPlayerStats=(PLAYER_STATS*const )BLKPTR(hPlayerStats);
	// CAvatar	* const pAvatar=(CAvatar* const )BLKPTR(pPlayerStats->hAvatar);
	
	if(fDomainTurn)
	{
		return NOT_SUPPORTED;
	}
	if(fBattleCombat)
	{
		return NOT_SUPPORTED;
	}
	else	// adventure level
	{
		switch(Action)
		{
			case ACTIVATE:
				//put your code that represents what the Item does when used here
				//if (bad)
				//	return CANT_COMPLETE;	
				
				//this means that the action couldn't be completed. This is most 
				//useful for EQUIP and PICKUP, if they return CANT_COMPLETE, then 
				//the avatar is not allowed to put the object into his spellboxes 
				//or pick up the object (respectively).
				//-------------
				//The effect function must take care of adding and removing itself 
				//from the ActiveItem list. when activated, add	the Item, and 
				//remove it in the DEACTIVATE case.
				//				  ThisFunc Arg1 ,Arg2,Duration(in frames)
				//					vvvv   vvv	 vvv   vvvvvvvvvvvvvvvvvvvvvvvvvv
				//mfAddActiveItem(Template,Combo,Arg,Item.mfDuration(hPlayerStats));
				
				//the two arguments should always be the same as the ones that
				//were passed to you in this function (Template)
				//the first (arg1) MUST be the itemtype/avatarHandle Combo
				//remember, the arguments that you pass the AddActiveItem func
				//are the arguments that this function will be called with when
				//it is being SERVICEd and DEACTIVATEd.
				break;
			case DEACTIVATE:
				//this happens when the duration runs out.
				//if you added the item to the active item list in ACTIVATE
				//you'll want to remove it here.
				//
				//mfRemoveActiveItem(Template,Combo,Arg);
				//
				//be sure that you pass in the same arguments as you passed in
				//otherwise it won't deactivate. and weird stuff may happen.
				break;
			case PICKUP:
				//this happens when the item is picked up, return CANT_COMPLETE
				//to disable the avatar from picking this up
				//example:
				// if (Avatar.IsGoodAligned() && Item.CantbeHeldByGood())	
				//		return CANT_COMPLETE;
				break;
			case DROP:
				//this is called when the item is dropped, it can be used to 
				//"lock" an item to an avatar.
				break;
			case EQUIP:
				//this is called when the item is added to the spellboxes
				break;
			case UNEQUIP:
				//this is called when the item is deleted from the spellboxes
				break;
			case SERVICE:
				//this is called everyframe that the item is active, so watch out
				//for performance issues here...
				//(try not to do any list-scans or input)
				break;
			default:
				//an invalid action was passed, and is not supported, so we let
				//the caller know that.
				return NOT_SUPPORTED;
		}
	}
	return OK; //everything went ok	
}







LONG ItemEffects::Regenerate(LONG Combo,LONG Arg,LONG Action)
{

	ITEMTYPE		Itemtype;
	SHORT			hAvatarStats;
	LONG			Result = OK;
	
 	SPLIT_COMBO(Combo,Itemtype,hAvatarStats);
 	
	ItemType&		Item=ItemTypes[Itemtype];
	
	if(fBattleCombat)
	{
		Result = NOT_SUPPORTED;
	}
	else	// adventure level or domain level
	{
		switch(Action)
		{
			case ACTIVATE:
				return DONT_DROP;
			case DEACTIVATE:
				break;
			case PICKUP:
				break;
			case DROP:
				break;
			case EQUIP:
				{
				DumbAutoLockPtr<PLAYER_STATS> const pPlayerStats(hAvatarStats);
				if (pPlayerStats->hAvatar == fERROR 
					|| pPlayerStats->mfGetCurHitPoints() <= 0)
				{
					Result = CANT_COMPLETE;
				}
				else
				{	
					Regenerator::mfRegister(hAvatarStats,Arg);
				}
				}
				break;
			case UNEQUIP:
				Regenerator::mfUnRegister(hAvatarStats,Arg);
				break;
			case SERVICE:
				break;
			default:
				Result = NOT_SUPPORTED;
				break;
		}
	}
	return Result; //everything went ok	
}



LONG ItemEffects::Rescuee(LONG,LONG,LONG action)
{
	if (fDomainTurn || fBattleCombat)
		return NOT_SUPPORTED;
	else if (action == PICKUP || action == DROP)
		return OK;
	else
		return CANT_COMPLETE;	
}


LONG ItemEffects::TouchSpell(LONG Combo, LONG arg, LONG action)
{
	SHORT Itemtype;
	SHORT hPlayerStats;
 	SPLIT_COMBO(Combo,Itemtype,hPlayerStats);
	
	if(fDomainTurn)
		return NOT_SUPPORTED;
		
	if(fBattleCombat)
		return NOT_SUPPORTED;
		
	// adventure level
	if (action == ACTIVATE)
	{
		if (arg & CLASS_RESTRICTED)
		{
			PLAYER_STATS * const pPlayerStats=(PLAYER_STATS* const)BLKPTR(hPlayerStats);
			switch(Itemtype)
			{
			case STAFF_OF_CURING:
				if (!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::PRIEST))
					return CANT_COMPLETE;
			
			default:
				break;
			}
		}
		TargetMenu::Display(Combo, arg);
		return OK;
	}
	else
		return NOT_SUPPORTED;
}


//arg is determined by high byte of arg,
//1=Percentage (low short is what percent)
//2=Absolute (low short is how many hp)
//3=Random (low 3 bytes describe the DICE to roll)
//4=Fully heal (low 3 bytes aren't important)


LONG ItemEffects::Heal(LONG Combo,LONG arg,LONG action)
{
	SHORT Itemtype;
	SHORT hPlayerStats;
 	SPLIT_COMBO(Combo,Itemtype,hPlayerStats);
	ItemType& Item=ItemTypes[Itemtype];

	LONG HealType=arg&HEAL_MASK;
	LONG amount_healed;
		
	DICE dice;
	dice.sbNumberOfDice=DICE_NUMDICE(arg);
	dice.sbNumberOfSides=DICE_NUMSIDES(arg);
	dice.sbModifier=DICE_MODIFIER(arg);
	

	if(fDomainTurn)
	{
		return NOT_SUPPORTED;
	}
	if(fBattleCombat)
	{
		return NOT_SUPPORTED;
		
	}
	else	// adventure level
	{
		switch(action)
		{
			case ACTIVATE:
			{
				
				DumbAutoLockPtr< PLAYER_STATS > const pPlayerStats(hPlayerStats);
				if (pPlayerStats->hAvatar == fERROR)
					return DONT_DROP;
					
				CAvatar const * const	pAvatar = (CAvatar const * const) BLKPTR(pPlayerStats->hAvatar);
			
				if (pPlayerStats->mfGetCurHitPoints() <= 0)  // can't heal dead guys
					return DONT_DROP;
				if (pPlayerStats->mfGetCurHitPoints() >= pPlayerStats->mfGetMaxHitPoints())
					return DONT_DROP;
					
				Item.mfMessage(STR_ACTIVATE_HEAL);
				
				switch(HealType)
				{
					case HEAL_PERCENT:
						mfSound(SND_HEAL1,NULL,pAvatar->ThingIndex);
						amount_healed = pPlayerStats->mfGetMaxHitPoints()*HEAL_DATA(arg)/100; 
						// pPlayerStats->HitPts += pPlayerStats->FullHitPts*HEAL_DATA(arg)/100; 
						break;
					case HEAL_ABSOLUT:
						mfSound(SND_HEAL1,NULL,pAvatar->ThingIndex);
						amount_healed = HEAL_DATA(arg);
						// pPlayerStats->HitPts += HEAL_DATA(arg); 
						break;
					case HEAL_RANDOM:
						mfSound(SND_HEAL1,NULL,pAvatar->ThingIndex);
						amount_healed = RollDice(&dice);
						// pPlayerStats->HitPts += RollDice(&dice);
						break;
					case HEAL_FULLY:
						mfSound(SND_HEAL2,NULL,pAvatar->ThingIndex);
						amount_healed = pPlayerStats->mfGetMaxHitPoints() - pPlayerStats->mfGetCurHitPoints();
						// pPlayerStats->HitPts = pPlayerStats->FullHitPts; 
						break;
					default:
						fatal_error ("bad Healing type %li passed to ItemEffects::Heal\n",HealType>>24);
				}
				if (amount_healed < 0)
					amount_healed = 0;
				
				if (pPlayerStats->mfGetCurHitPoints() < pPlayerStats->mfGetMaxHitPoints())
				{
					pPlayerStats->mfHeal(amount_healed);
				}
				
				break;
			}
			default:
				return NOT_SUPPORTED;
		}
	}
	return OK;
}




/* -----------------------------------------------------------------
   
   ----------------------------------------------------------------- */

LONG ItemEffects::AddToAttribute(LONG Combo,LONG Arg,LONG Action)
{
	STATSMOD::MOD_TYPE type;
	LONG				mod;
	
	ITEMTYPE		Itemtype;
	SHORT			hPlayerStats;
	
 	SPLIT_COMBO(Combo,Itemtype,hPlayerStats);
 	
	ItemType&		Item=ItemTypes[Itemtype];

	// works in all modes
	switch(Action)
	{
		case ACTIVATE:
			return CANT_COMPLETE;
			
		case DEACTIVATE:
			break;
			
		case PICKUP:
		{
//			if (!mfAddActiveItem(ItemEffects::AddToAttribute,Combo,Arg,Item.mfDuration(hPlayerStats)))
//				return CANT_COMPLETE;
				
			DumbAutoLockPtr< PLAYER_STATS > const pPlayerStats(hPlayerStats);
			
			if (Arg&AT_STR)
			{
				type = STATSMOD::STRENGTH_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, mod);
			}
			if (Arg&AT_INT)
			{
				type = STATSMOD::INTELLIGENCE_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, mod);
			}
			if (Arg&AT_WIS)
			{
				type = STATSMOD::WISDOM_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, mod);
			}
			if (Arg&AT_DEX)
			{
				type = STATSMOD::DEXTERITY_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, mod);
			}
			if (Arg&AT_CON)
			{
				type = STATSMOD::CONSTITUTION_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, mod);
			}
			if (Arg&AT_CHA)
			{
				type = STATSMOD::CHARISMA_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, mod);
			}
			if (Arg&AT_LEV)
			{
				type = STATSMOD::LEVEL_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, mod);
			}
			if (Arg&AT_HP)
			{
				type = STATSMOD::HITPOINTS_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, mod);
			}
			if (Arg&AT_AC)
			{
				type = STATSMOD::ARMORCLASS_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, mod);
			}
		}
			break;
		
		case DROP:
		{
			DumbAutoLockPtr< PLAYER_STATS > const pPlayerStats(hPlayerStats);
			
			if(Arg&AT_STR)
			{
				type = STATSMOD::STRENGTH_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, -mod);
			}
			if(Arg&AT_INT)
			{
				type = STATSMOD::INTELLIGENCE_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, -mod);
			}
			if(Arg&AT_WIS)
			{
				type = STATSMOD::WISDOM_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, -mod);
			}
			if(Arg&AT_DEX)
			{
				type = STATSMOD::DEXTERITY_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, -mod);
			}
			if(Arg&AT_CON)
			{
				type = STATSMOD::CONSTITUTION_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, -mod);
			}
			if(Arg&AT_CHA)
			{
				type = STATSMOD::CHARISMA_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, -mod);
			}
			if(Arg&AT_LEV)
			{
				type = STATSMOD::LEVEL_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, -mod);
			}
			if(Arg&AT_HP)
			{
				type = STATSMOD::HITPOINTS_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, -mod);
			}
			if(Arg&AT_AC)
			{
				type = STATSMOD::ARMORCLASS_MOD;
				mod = (SBYTE)(Arg&0x0000ffff);
				pPlayerStats->StatsMod.mfModifyStats(type, -mod);
			}
//			mfRemoveActiveItem(ItemEffects::AddToAttribute,Combo,Arg);
		}
			break;
			
		case EQUIP:
			break;
		case UNEQUIP:
			break;
		case SERVICE:
			break;
		default:
			return NOT_SUPPORTED;
	}
	return OK; //everything went ok	
}




LONG ItemEffects::ImproveWeapon(LONG Combo,LONG Arg,LONG Action)
{

	ITEMTYPE		Itemtype;
	SHORT			hPlayerStats;
	
 	SPLIT_COMBO(Combo,Itemtype,hPlayerStats);
 	
	ItemType&		Item=ItemTypes[Itemtype];
	
	// if(fDomainTurn)
	// {
	//	return NOT_SUPPORTED;
	// }
	// if(fBattleCombat)
	// {
	//	return NOT_SUPPORTED;
	// }
	// else	// adventure level
	// works in all modes
	{
		switch(Action)
		{
			case ACTIVATE:
			{
				if (!mfAddActiveItem(ItemEffects::ImproveWeapon,Combo,Arg,Item.mfDuration(hPlayerStats)))
					return CANT_COMPLETE;
					
				DumbAutoLockPtr< PLAYER_STATS > const pPlayerStats(hPlayerStats);
				
				pPlayerStats->StatsMod.mfModifyStats(STATSMOD::WEAPONHIT_MOD, Arg);
				pPlayerStats->StatsMod.mfModifyStats(STATSMOD::WEAPONDAMAGE_MOD, Arg);
			}
				break;
			case DEACTIVATE:
			{
				DumbAutoLockPtr< PLAYER_STATS > const pPlayerStats(hPlayerStats);
				
				pPlayerStats->StatsMod.mfModifyStats(STATSMOD::WEAPONHIT_MOD, -Arg);
				pPlayerStats->StatsMod.mfModifyStats(STATSMOD::WEAPONDAMAGE_MOD, -Arg);
				mfRemoveActiveItem(ItemEffects::ImproveWeapon,Combo,Arg);
			}
				break;
			case PICKUP:
				break;
			case DROP:
				break;
			case EQUIP:
				break;
			case UNEQUIP:
				break;
			case SERVICE:
				break;
			default:
				return NOT_SUPPORTED;
		}
	}
	return OK; //everything went ok	
}

/* -----------------------------------------------------------------
   
   ----------------------------------------------------------------- */

LONG ItemEffects::SetAttrTo(LONG Combo,LONG Arg,LONG Action)
{
	STATSMOD::SET_TYPE	type;
	LONG				mod;

	ITEMTYPE		Itemtype;
	SHORT			hPlayerStats;
	
 	SPLIT_COMBO(Combo,Itemtype,hPlayerStats);
 	
	ItemType&		Item=ItemTypes[Itemtype];
	
	//if(fDomainTurn)
	//{
	//	return NOT_SUPPORTED;
	//}
	//if(fBattleCombat)
	//{
	//	return NOT_SUPPORTED;
	//}
	//else	// adventure level
	// works in all modes
	{
		DumbAutoLockPtr< PLAYER_STATS > const pPlayerStats(hPlayerStats);
		switch(Action)
		{
			case ACTIVATE:
				{
				if (!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::FIGHTER) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::RANGER) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::PALADIN))
					return CANT_COMPLETE;
					
				if (!mfAddActiveItem(ItemEffects::SetAttrTo,Combo,Arg,Item.mfDuration(hPlayerStats)))
					return CANT_COMPLETE;
				
				
				if(Arg&AT_STR)
				{
					type = STATSMOD::STRENGTH_SET;
					mod = (SBYTE)(Arg&0x0000ffff);
				}
				else
				if(Arg&AT_INT)
				{
					type = STATSMOD::INTELLIGENCE_SET;
					mod = (SBYTE)(Arg&0x0000ffff);
				}
				else
				if(Arg&AT_WIS)
				{
					type = STATSMOD::WISDOM_SET;
					mod = (SBYTE)(Arg&0x0000ffff);
				}
				else
				if(Arg&AT_DEX)
				{
					type = STATSMOD::DEXTERITY_SET;
					mod = (SBYTE)(Arg&0x0000ffff);
				}
				else
				if(Arg&AT_CON)
				{
					type = STATSMOD::CONSTITUTION_SET;
					mod = (SBYTE)(Arg&0x0000ffff);
				}
				else
				if(Arg&AT_CHA)
				{
					type = STATSMOD::CHARISMA_SET;
					mod = (SBYTE)(Arg&0x0000ffff);
				}
				else
				if(Arg&AT_LEV)
				{
					type = STATSMOD::LEVEL_SET;
					mod = (SBYTE)(Arg&0x0000ffff);
				}
				pPlayerStats->StatsMod.mfSetStats(type, mod);
				
				}
				break;
			case DEACTIVATE:
				{
				DumbAutoLockPtr< PLAYER_STATS > const pPlayerStats(hPlayerStats);
				
				if(Arg&AT_STR)
				{
					type = STATSMOD::STRENGTH_SET;
				}
				else
				if(Arg&AT_INT)
				{
					type = STATSMOD::INTELLIGENCE_SET;
				}
				else
				if(Arg&AT_WIS)
				{
					type = STATSMOD::WISDOM_SET;
				}
				else
				if(Arg&AT_DEX)
				{
					type = STATSMOD::DEXTERITY_SET;
				}
				else
				if(Arg&AT_CON)
				{
					type = STATSMOD::CONSTITUTION_SET;
				}
				else
				if(Arg&AT_CHA)
				{
					type = STATSMOD::CHARISMA_SET;
				}
				else
				if(Arg&AT_LEV)
				{
					type = STATSMOD::LEVEL_SET;
				}
				else
				if(Arg&AT_HP)
				{
					type = STATSMOD::HITPOINTS_SET;
				}
				else
				if(Arg&AT_AC)
				{
					type = STATSMOD::ARMORCLASS_SET;
				}
				pPlayerStats->StatsMod.mfSetStats(type, 0);
				mfRemoveActiveItem(ItemEffects::SetAttrTo,Combo,Arg);
				}
				break;
			case PICKUP:
				break;
			case DROP:
				break;
			case EQUIP:
				break;
			case UNEQUIP:
				break;
			case SERVICE:
				break;
			default:
				return NOT_SUPPORTED;
		}
	}
	return OK; //everything went ok	
}
/* -----------------------------------------------------------------
   
   ----------------------------------------------------------------- */
LONG ItemEffects::Invulnerable(LONG Combo,LONG Arg,LONG Action)
{
	STATSMOD::MOD_TYPE	type;
	LONG				mod;

	ITEMTYPE		Itemtype;
	SHORT			hPlayerStats;
	
 	SPLIT_COMBO(Combo,Itemtype,hPlayerStats);
 	
	ItemType&		Item=ItemTypes[Itemtype];

	//if(fDomainTurn)
	//{
	//	return NOT_SUPPORTED;
	//}
	//if(fBattleCombat)
	//{
	//	return NOT_SUPPORTED;
	//}
	//else	// adventure level
	// works in all modes
	{
		DumbAutoLockPtr< PLAYER_STATS > const pPlayerStats(hPlayerStats);
		switch(Action)
		{
			case ACTIVATE:
			{
				if (!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::FIGHTER) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::RANGER) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::PALADIN))
					return CANT_COMPLETE;
					
				if (!mfAddActiveItem(ItemEffects::Invulnerable,Combo,Arg,Item.mfDuration(hPlayerStats)))
					return CANT_COMPLETE;
					
				if (pPlayerStats->hAvatar == fERROR)
					return CANT_COMPLETE;
					
				CAvatar const * const pAvatar = (CAvatar const * const) BLKPTR(pPlayerStats->hAvatar);

				Item.mfMessage(STR_ACTIVATE_INVULNERABLE);
				mfSound(SND_GENERAL_MAGIC1,1,pAvatar->ThingIndex);
				
				pPlayerStats->StatsMod.mfModifyStats(STATSMOD::DAMAGE_RESIST_MOD, +100);
			}
				break;
				
			case DEACTIVATE:
			{
				DumbAutoLockPtr< PLAYER_STATS > const pPlayerStats(hPlayerStats);
				
				Item.mfMessage(STR_DEACTIVATE_INVULNERABLE);
				
 				pPlayerStats->StatsMod.mfModifyStats(STATSMOD::DAMAGE_RESIST_MOD, -100);
				mfRemoveActiveItem(ItemEffects::Invulnerable,Combo,Arg);
			}
				break;
			
			case PICKUP:
				break;
			case DROP:
				break;
			case EQUIP:
				break;
			case UNEQUIP:
				break;
			case SERVICE:
				break;
			default:
				return NOT_SUPPORTED;
		}
	}
	return OK; //everything went ok	
}
/* -----------------------------------------------------------------
   
   ----------------------------------------------------------------- */
LONG ItemEffects::ActResistance(LONG Combo,LONG Arg,LONG Action)
{
	STATSMOD::MOD_TYPE	type;
	LONG				mod;

	ITEMTYPE		Itemtype;
	SHORT			hPlayerStats;
	
 	SPLIT_COMBO(Combo,Itemtype,hPlayerStats);
 	
	ItemType&		Item=ItemTypes[Itemtype];

	
	if(fDomainTurn)
	{
		// must allow pickup of item, at least...
		
		switch(Action)
		{
			case PICKUP:
			case DROP:
				return OK;
		}
		return NOT_SUPPORTED;
	}
	if(fBattleCombat)
	{
		return NOT_SUPPORTED;
	}
	else	// adventure level
	{
		switch(Action)
		{
			case ACTIVATE:
			{
				if (!mfAddActiveItem(ItemEffects::ActResistance,Combo,Arg,Item.mfDuration(hPlayerStats)))
					return CANT_COMPLETE;
					
				mod = 1;
				GAME_STRING str=STR_NULL;
				
				if (Arg&_RESIST_FIRE)
				{
					type = STATSMOD::FIRE_RESIST_MOD;
					str=STR_ACTIVATE_RESIST_FIRE;
				}
				else if (Arg&_RESIST_COLD)
				{
					type = STATSMOD::COLD_RESIST_MOD;
					str=STR_ACTIVATE_RESIST_COLD;
				}
				else if (Arg&_RESIST_EVIL)
				{
					type = STATSMOD::EVIL_RESIST_MOD;
					str=STR_ACTIVATE_RESIST_EVIL;
					
				}
				else if (Arg&_RESIST_MAGIC)
				{
					type = STATSMOD::MAGIC_RESIST_MOD;
					mod = (SBYTE)(Arg&0x0000FFFF);
					str=STR_ACTIVATE_RESIST_MAGIC;
					
				}
				else if (Arg&_RESIST_FEAR)
				{
					type = STATSMOD::FEAR_RESIST_MOD;
					str=STR_ACTIVATE_RESIST_FEAR;
					
				}
			
				ADVENTURER_TEAM_ITOR AdvItor;
				for (AdvItor = ADVENTURER::begin(); AdvItor != ADVENTURER::end();
		    		AdvItor++)
		    	{
					CAvatar  const * const pAvatar = (CAvatar const * const) BLKPTR(*AdvItor);
		    		SHORT hPS = pAvatar->hPlayerStats;
		    		if (hPS == fERROR)
		    		    continue;
		    	    
					DumbAutoLockPtr< PLAYER_STATS > const pPS(hPS);
					pPS->StatsMod.mfModifyStats(type, mod);
	     		}
	     		
				DumbAutoLockPtr< PLAYER_STATS > const pPlayerStats(hPlayerStats);
	    		
	    		if (pPlayerStats->hAvatar == fERROR)
	    			break;
	    			
				CAvatar const * const pAvatar = (CAvatar const * const) BLKPTR(pPlayerStats->hAvatar);

				Item.mfMessage(str);
				mfSound(SND_GENERAL_MAGIC1,1,pAvatar->ThingIndex);
			}
				break;
				
			case DEACTIVATE:
			{
				mod = 1;
				GAME_STRING str=STR_NULL;
				
				if (Arg&_RESIST_FIRE)
				{
					type = STATSMOD::FIRE_RESIST_MOD;
					str=STR_DEACTIVATE_RESIST_FIRE;
				}
				else if (Arg&_RESIST_COLD)
				{
					type = STATSMOD::COLD_RESIST_MOD;
					str=STR_DEACTIVATE_RESIST_COLD;
				}
				else if (Arg&_RESIST_EVIL)
				{
					type = STATSMOD::EVIL_RESIST_MOD;
					str=STR_DEACTIVATE_RESIST_EVIL;
					
				}
				else if (Arg&_RESIST_MAGIC)
				{
					type = STATSMOD::MAGIC_RESIST_MOD;
					mod = (SBYTE)(Arg&0x0000FFFF);
					str=STR_DEACTIVATE_RESIST_MAGIC;
					
				}
				else if (Arg&_RESIST_FEAR)
				{
					type = STATSMOD::FEAR_RESIST_MOD;
					str=STR_DEACTIVATE_RESIST_FEAR;
					
				}
				
				ADVENTURER_TEAM_ITOR AdvItor;
				for (AdvItor = ADVENTURER::begin(); AdvItor != ADVENTURER::end();
		    		AdvItor++)
		    	{
					CAvatar const * const pAvatar = (CAvatar const * const) BLKPTR(*AdvItor);
		    		SHORT hPS = pAvatar->hPlayerStats;
		    		if (hPS == fERROR)
		    		    continue;
		    	    
					DumbAutoLockPtr< PLAYER_STATS > const pPS(hPS);
					pPS->StatsMod.mfModifyStats(type, -mod);
	     		}
	     		
				Item.mfMessage(str);
				mfRemoveActiveItem(ItemEffects::ActResistance,Combo,Arg);
			}
				break;
				
			case PICKUP:
				break;
			case DROP:
				break;
			case EQUIP:
				break;
			case UNEQUIP:
				break;
			case SERVICE:
				break;
			default:
				return NOT_SUPPORTED;
		}
	}
	return OK; //everything went ok	
}
/* -----------------------------------------------------------------
   
   ----------------------------------------------------------------- */
LONG ItemEffects::Resistance(LONG Combo,LONG Arg,LONG Action)
{
	STATSMOD::MOD_TYPE	type;
	LONG				mod;

	ITEMTYPE		Itemtype;
	SHORT			hPlayerStats;
	
 	SPLIT_COMBO(Combo,Itemtype,hPlayerStats);
 	
	ItemType&		Item=ItemTypes[Itemtype];

	
	//if(fDomainTurn)
	//{
	//	return NOT_SUPPORTED;
	//}
	//if(fBattleCombat)
	//{
	//	return NOT_SUPPORTED;
	//}
	//else	// adventure level
	// works in all modes
	{
		switch(Action)
		{
			case ACTIVATE:
				return DONT_DROP;
				
			case DEACTIVATE:
				break;
			case PICKUP:
				break;
			case DROP:
				break;
				
			case EQUIP:
			{
				if (!mfAddActiveItem(ItemEffects::SetAttrTo,Combo,Arg,Item.mfDuration(hPlayerStats)))
					return CANT_COMPLETE;
					
				PLAYER_STATS	* const pPlayerStats=(PLAYER_STATS* const)BLKPTR(hPlayerStats);
				
				mod = 1;
				if(Arg&_RESIST_FIRE)
				{
					type = STATSMOD::FIRE_RESIST_MOD;
				}
				else
				if(Arg&_RESIST_COLD)
				{
					type = STATSMOD::COLD_RESIST_MOD;
				}
				else
				if(Arg&_RESIST_EVIL)
				{
					type = STATSMOD::EVIL_RESIST_MOD;
				}
				else
				if(Arg&_RESIST_MAGIC)
				{
					type = STATSMOD::MAGIC_RESIST_MOD;
					mod = (SBYTE)(Arg&0x0000FFFF);
				}
				else
				if(Arg&_RESIST_FEAR)
				{
					type = STATSMOD::FEAR_RESIST_MOD;
				}
				pPlayerStats->StatsMod.mfModifyStats(type, mod);
			}
				break;
			case UNEQUIP:
			{
				PLAYER_STATS	* const pPlayerStats=(PLAYER_STATS* const)BLKPTR(hPlayerStats);
	
				mod = 1;
				if(Arg&_RESIST_FIRE)
				{
					type = STATSMOD::FIRE_RESIST_MOD;
				}
				else
				if(Arg&_RESIST_COLD)
				{
					type = STATSMOD::COLD_RESIST_MOD;
				}
				else
				if(Arg&_RESIST_EVIL)
				{
					type = STATSMOD::EVIL_RESIST_MOD;
				}
				else
				if(Arg&_RESIST_MAGIC)
				{
					type = STATSMOD::MAGIC_RESIST_MOD;
					mod = (SBYTE)(Arg&0x0000FFFF);
				}
				else
				if(Arg&_RESIST_FEAR)
				{
					type = STATSMOD::FEAR_RESIST_MOD;
				}
 				pPlayerStats->StatsMod.mfModifyStats(type, -mod);
				mfRemoveActiveItem(ItemEffects::SetAttrTo,Combo,Arg);
			}
				break;
			case SERVICE:
				break;
			default:
				return NOT_SUPPORTED;
		}
	}
	return OK; //everything went ok	
}
/* -----------------------------------------------------------------
   
   ----------------------------------------------------------------- */
LONG ItemEffects::ImproveArmor(LONG Combo,LONG Arg,LONG Action)
{

	SHORT			ac_mod;
	SHORT			max_ac;
	SHORT			cur_ac;
	ITEMTYPE		Itemtype;
	SHORT			hPlayerStats;
	
 	SPLIT_COMBO(Combo,Itemtype,hPlayerStats);
 	
	ItemType&		Item=ItemTypes[Itemtype];

	// if(fDomainTurn)
	// {
	//	return NOT_SUPPORTED;
	// }
	// if(fBattleCombat)
	// {
	//	return NOT_SUPPORTED;
	// }
	// else	// adventure level
	// works in all modes
	{
		switch(Action)
		{
			case ACTIVATE:
			{
				if (!mfAddActiveItem(ItemEffects::ImproveArmor,Combo,Arg,Item.mfDuration(hPlayerStats)))
					return CANT_COMPLETE;
				
				DumbAutoLockPtr< PLAYER_STATS > const pPlayerStats(hPlayerStats);
				if (pPlayerStats->hAvatar == fERROR)
					return CANT_COMPLETE;
					
				CAvatar const * const pAvatar = (CAvatar const * const) BLKPTR(pPlayerStats->hAvatar);
				
				ac_mod = (SHORT)(Arg & 0x0000FFFF);
				max_ac = (SHORT)((Arg & 0x000F0000)>>16);

				Item.mfMessage(STR_ACTIVATE_IMPROVE_ARMOR);
				mfSound(SND_GENERAL_MAGIC1,1,pAvatar->ThingIndex);

				pPlayerStats->StatsMod.mfModifyStats(STATSMOD::ARMORCLASS_MOD, -ac_mod);
			}
				break;
			case DEACTIVATE:
			{
				DumbAutoLockPtr< PLAYER_STATS > const pPlayerStats(hPlayerStats);
				
				ac_mod = (SHORT)(Arg & 0x0000FFFF);
				max_ac = (SHORT)((Arg & 0x000F0000)>>16);

				Item.mfMessage(STR_DEACTIVATE_IMPROVE_ARMOR);
				pPlayerStats->StatsMod.mfModifyStats(STATSMOD::ARMORCLASS_MOD, ac_mod);
				mfRemoveActiveItem(ItemEffects::ImproveArmor,Combo,Arg);
			}
				break;
			case PICKUP:
				break;
			case DROP:
				break;
			case EQUIP:
				break;
			case UNEQUIP:
				break;
			case SERVICE:
				break;
			default:
				return NOT_SUPPORTED;
		}
	}
	return OK; //everything went ok	
}
/* -----------------------------------------------------------------
   
   ----------------------------------------------------------------- */

LONG ItemEffects::HurlFireBall(LONG Combo,LONG Arg,LONG Action)
{

	ITEMTYPE		Itemtype;
	SHORT			hPlayerStats;
	
 	SPLIT_COMBO(Combo,Itemtype,hPlayerStats);
 	
	ItemType&		Item=ItemTypes[Itemtype];

	if(fDomainTurn)
	{
		return NOT_SUPPORTED;
	}
	if(fBattleCombat)
	{
		DumbAutoLockPtr< PLAYER_STATS > const pPlayerStats(hPlayerStats);
		switch(Action)
		{
			case ACTIVATE:
				if ((Arg & CLASS_RESTRICTED) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::WIZARD) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::BARD))
					return CANT_COMPLETE;
					
				if(Arg & AT_MISSILE)
					fBtlMagicType = BTLCAP_MAGIC_MISSILE;
				else
				if(Arg & AT_FIRE)
					fBtlMagicType = BTLCAP_MAGIC_FIRE;
				else
				if(Arg & AT_PLASMA)
					fBtlMagicType = BTLCAP_MAGIC_PLASMA;
				else
				if(Arg & AT_LIGHTNING)
					fBtlMagicType = BTLCAP_MAGIC_LIGHTNING;
				else
				if(Arg & AT_VAPORIZE)
					fBtlMagicType = BTLCAP_MAGIC_DESOLVE;
				else
				if(Arg & AT_CRUMBLE)
					fBtlMagicType = BTLCAP_MAGIC_DESOLVE;
					
				fBtlMagicResult = BTL_R;
				
				
				if (ItemTypes[Itemtype].mfCategory() == IC_MAGITEM)
				{
					ItemChargeHandler::mfDropCharge(Itemtype,hPlayerStats);
					return DONT_DROP;
				}
				break;

			case DEACTIVATE:
				break;
			case PICKUP:
				break;
			case DROP:
				break;
			case EQUIP:
				break;
			case UNEQUIP:
				break;
			case SERVICE:
				break;
			default:
				return NOT_SUPPORTED;
		}
	}
	else	// adventure level
	{
		switch(Action)
		{
			case ACTIVATE:
				{
				PLAYER_STATS * const pPlayerStats=(PLAYER_STATS* const)BLKPTR(hPlayerStats);
				SHORT 		const hAvatar = pPlayerStats->hAvatar;
				
				if ((Arg & CLASS_RESTRICTED) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::WIZARD) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::BARD))
					return CANT_COMPLETE;
					
				if (hAvatar == fERROR)
					return NOT_SUPPORTED;
				
				CAvatar	* const pAvatar=(CAvatar* const )BLKPTR(hAvatar);
				
				DICE	dice; 
				SHORT	damage;
				SBYTE	level;
				
				dice.sbNumberOfSides=DICE_NUMSIDES(Arg);
				dice.sbModifier=DICE_MODIFIER(Arg);
				
				if (Arg & USE_LEVEL)
				{
				   LONG WizClass = pPlayerStats->mfGetSpellCastClass(SPELL_INFO::WIZARD);
				   if (WizClass==CANT_CAST_SPELLS)
					    return CANT_COMPLETE;
				   
				   level=pPlayerStats->mfGetLevel(WizClass);
					if (level > 10)
						level = 10;
				}
				else
					level = DICE_NUMDICE(Arg);
				
				dice.sbNumberOfDice = level;
				damage = RollDice(&dice);
				
				pAvatar->mfSetDamageDealt(damage);
				
				if(Arg & AT_MISSILE)
					pAvatar->mfCreateFireBall( GetNewId(), MAGIC_MISSILE_1, damage);
				else
				if(Arg & AT_FIRE)
					pAvatar->mfCreateFireBall( GetNewId(), FIREBALL_1, damage);
				else
				if(Arg & AT_PLASMA)
					pAvatar->mfCreateFireBall( GetNewId(), PLASMA_BALL_1, damage);
				else
				if(Arg & AT_LIGHTNING)
					pAvatar->mfCreateFireBall( GetNewId(), LIGHTNING_1, damage);
				else
				if(Arg & AT_VAPORIZE)
					pAvatar->mfCreateFireBall( GetNewId(), VAPORIZE_1, damage);
				else
				if(Arg & AT_CRUMBLE)
					pAvatar->mfCreateFireBall( GetNewId(), CRUMBLE_1, damage);
				}
				
				if (ItemTypes[Itemtype].mfCategory() == IC_MAGITEM)
				{
					ItemChargeHandler::mfDropCharge(Itemtype,hPlayerStats);
					return DONT_DROP;
				}
				break;
				
			case DEACTIVATE:
				break;
			case PICKUP:
				break;
			case DROP:
				break;
			case EQUIP:
				break;
			case UNEQUIP:
				break;
			case SERVICE:
				break;
			default:
				return NOT_SUPPORTED;
		}
	}
	return OK; //everything went ok	
}
/* -----------------------------------------------------------------
   
   ----------------------------------------------------------------- */

LONG ItemEffects::FrostCone(LONG Combo,LONG Arg,LONG Action)
{

	ITEMTYPE		Itemtype;
	SHORT			hPlayerStats;
	
 	SPLIT_COMBO(Combo,Itemtype,hPlayerStats);
	PLAYER_STATS * const pPlayerStats=(PLAYER_STATS* const)BLKPTR(hPlayerStats);
 	
	ItemType&		Item=ItemTypes[Itemtype];
	
	if(fDomainTurn)
	{
		return NOT_SUPPORTED;
	}
	if(fBattleCombat)
	{
		switch(Action)
		{
			case ACTIVATE:
				if ((Arg & CLASS_RESTRICTED) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::WIZARD) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::BARD))
					return CANT_COMPLETE;
					
				fBtlMagicType = BTLCAP_MAGIC_PLASMA;
				fBtlMagicResult = BTL_R;

				if (ItemTypes[Itemtype].mfCategory() == IC_MAGITEM)
				{
					ItemChargeHandler::mfDropCharge(Itemtype,hPlayerStats);
					return DONT_DROP;
				}
				break;
				
			case DEACTIVATE:
				break;
			case PICKUP:
				break;
			case DROP:
				break;
			case EQUIP:
				break;
			case UNEQUIP:
				break;
			case SERVICE:
				break;
			default:
				return NOT_SUPPORTED;
		}
	}
	else	// adventure level
	{
		switch(Action)
		{
			case ACTIVATE:
				{
				SHORT 		const hAvatar = pPlayerStats->hAvatar;
				
				if ((Arg & CLASS_RESTRICTED) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::WIZARD) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::BARD))
					return CANT_COMPLETE;
					
				if (hAvatar == fERROR)
					return NOT_SUPPORTED;
					
				CAvatar	* const pAvatar=(CAvatar* const )BLKPTR(hAvatar);
				
				DICE	dice; 
				SHORT	damage;
				SBYTE	level = (SHORT) pPlayerStats->mfGetLevel(0);
				
				dice.sbNumberOfSides=DICE_NUMSIDES(Arg);
				dice.sbModifier=DICE_MODIFIER(Arg);
				
				if (Arg & USE_LEVEL)
				{
					if (level > 10)
						level = 10;
				}
				else
					level = DICE_NUMDICE(Arg);
				
				dice.sbNumberOfDice = level;
				damage = RollDice(&dice);
				
				pAvatar->mfSetDamageDealt(damage);
				
				pAvatar->mfCreateFireBall( GetNewId(), PLASMA_BALL_1, damage);
				}
				break;
			case DEACTIVATE:
				break;
			case PICKUP:
				break;
			case DROP:
				break;
			case EQUIP:
				break;
			case UNEQUIP:
				break;
			case SERVICE:
				break;
			default:
				return NOT_SUPPORTED;
		}
	}
	return OK; //everything went ok	
}
LONG ItemEffects::IlluminateAreaRad(LONG Combo,LONG Arg,LONG Action)
{

	ITEMTYPE		Itemtype;
	SHORT			hPlayerStats;
	
 	SPLIT_COMBO(Combo,Itemtype,hPlayerStats);
 	
	ItemType&		Item=ItemTypes[Itemtype];

	
	if(fDomainTurn)
	{
		return NOT_SUPPORTED;
	}
	if(fBattleCombat)
	{
		return NOT_SUPPORTED;
	}
	else	// adventure level
	{
		switch(Arg)
		{
			case ACTIVATE:
			{
				if (!mfAddActiveItem(ItemEffects::IlluminateAreaRad,Combo,0,Item.mfDuration(hPlayerStats)))
					return CANT_COMPLETE;
				DumbAutoLockPtr< PLAYER_STATS > const pPlayerStats(hPlayerStats);
				if (pPlayerStats->hAvatar == fERROR)
					return CANT_COMPLETE;
					
				CAvatar const * const pAvatar = (CAvatar const * const) BLKPTR(pPlayerStats->hAvatar);
				
				Item.mfMessage(STR_ACTIVATE_LIGHT);
				mfSound(SND_INFRAVISION1,1,pAvatar->ThingIndex);
				gfTestMagicLightSwitch=TRUE;
				break;
			}
			
			case DEACTIVATE:
			{
				Item.mfMessage(STR_DEACTIVATE_LIGHT);
				gfTestMagicLightSwitch=FALSE;
				mfRemoveActiveItem(ItemEffects::IlluminateAreaRad,Combo,0);
				break;
			}
			
			case PICKUP:
				break;
			case DROP:
				break;
			case EQUIP:
				break;
			case UNEQUIP:
				break;
			case SERVICE:
				break;
			default:
				return NOT_SUPPORTED;
		}
	}
	
	return OK;

}
/* -----------------------------------------------------------------
   
   ----------------------------------------------------------------- */

LONG ItemEffects::ElectricalBolt(LONG Combo,LONG Arg,LONG Action)
{

	ITEMTYPE		Itemtype;
	SHORT			hPlayerStats;
	
 	SPLIT_COMBO(Combo,Itemtype,hPlayerStats);
 	
	ItemType&		Item=ItemTypes[Itemtype];
	
	if(fDomainTurn)
	{
		return NOT_SUPPORTED;
	}
	if(fBattleCombat)
	{
		PLAYER_STATS * const pPlayerStats=(PLAYER_STATS* const)BLKPTR(hPlayerStats);
		switch(Action)
		{
			case ACTIVATE:
				if ((Arg & CLASS_RESTRICTED) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::WIZARD) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::BARD))
					return CANT_COMPLETE;
				
				fBtlMagicType = BTLCAP_MAGIC_LIGHTNING;
				fBtlMagicResult = BTL_R;

				if (ItemTypes[Itemtype].mfCategory() == IC_MAGITEM)
				{
					ItemChargeHandler::mfDropCharge(Itemtype,hPlayerStats);
					return DONT_DROP;
				}
				break;

			case DEACTIVATE:
				break;
			case PICKUP:
				break;
			case DROP:
				break;
			case EQUIP:
				break;
			case UNEQUIP:
				break;
			case SERVICE:
				break;
			default:
				return NOT_SUPPORTED;
		}
	}
	else	// adventure level
	{
		switch(Action)
		{
			case ACTIVATE:
			{
				PLAYER_STATS * const pPlayerStats=(PLAYER_STATS* const)BLKPTR(hPlayerStats);
				SHORT 		const hAvatar = pPlayerStats->hAvatar;
				
				if ((Arg & CLASS_RESTRICTED) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::WIZARD) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::BARD))
					return CANT_COMPLETE;
				
				if (hAvatar == fERROR)
					return NOT_SUPPORTED;
					
				CAvatar	* const pAvatar=(CAvatar* const )BLKPTR(hAvatar);
				
				DICE	dice; 
				SHORT	damage;
				SBYTE	level = (SHORT) pPlayerStats->mfGetLevel(0);
				
				dice.sbNumberOfSides=DICE_NUMSIDES(Arg);
				dice.sbModifier=DICE_MODIFIER(Arg);
				
				if (Arg & USE_LEVEL)
				{
					if (level > 10)
						level = 10;
				}
				else
					level = DICE_NUMDICE(Arg);
				
				dice.sbNumberOfDice = level;
				damage = RollDice(&dice);
				
				pAvatar->mfSetDamageDealt(damage);
				
				pAvatar->mfCreateFireBall( GetNewId(), LIGHTNING_1, damage);
		
				if (ItemTypes[Itemtype].mfCategory() == IC_MAGITEM)
				{
					ItemChargeHandler::mfDropCharge(Itemtype,hPlayerStats);
					return DONT_DROP;
				}
				break;
			}
			case DEACTIVATE:
				break;
			case PICKUP:
				break;
			case DROP:
				break;
			case EQUIP:
				break;
			case UNEQUIP:
				break;
			case SERVICE:
				break;
			default:
				return NOT_SUPPORTED;
		}
	}
	return OK; //everything went ok	
}
/* -----------------------------------------------------------------
   
   ----------------------------------------------------------------- */
LONG ItemEffects::ParalyzeAllInRad(LONG Combo,LONG Arg,LONG Action)
{

	ITEMTYPE		Itemtype;
	SHORT			hPlayerStats;
	
 	SPLIT_COMBO(Combo,Itemtype,hPlayerStats);
 	
	ItemType&		Item=ItemTypes[Itemtype];
	
	if(fDomainTurn)
	{
		return NOT_SUPPORTED;
	}
	if(fBattleCombat)
	{
		return NOT_SUPPORTED;
	}
	else	// adventure level
	{
		switch(Action)
		{
			case ACTIVATE:
				{
				PLAYER_STATS * const pPlayerStats=(PLAYER_STATS* const)BLKPTR(hPlayerStats);
				SHORT 		const hAvatar = pPlayerStats->hAvatar;
				
				if ((Arg & CLASS_RESTRICTED) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::WIZARD) &&
					!pPlayerStats->mfIsType(PLAYER_CLASS_INFO::BARD))
					return CANT_COMPLETE;
				
				if (hAvatar == fERROR)
					return NOT_SUPPORTED;
					
				CAvatar	* const pAvatar=(CAvatar* const )BLKPTR(hAvatar);
				
				if (pAvatar->hEnemy == fERROR)
					return CANT_COMPLETE;
					
				CAvatar * const pEnemyAvatar = (CAvatar * const)BLKPTR(pAvatar->hEnemy);
				pEnemyAvatar->mfTurnToStone();

				if (ItemTypes[Itemtype].mfCategory() == IC_MAGITEM)
				{
					ItemChargeHandler::mfDropCharge(Itemtype,hPlayerStats);
					return DONT_DROP;
				}
				break;
				
				}
			case DEACTIVATE:
				break;
			case PICKUP:
				break;
			case DROP:
				break;
			case EQUIP:
				break;
			case UNEQUIP:
				break;
			case SERVICE:
				break;
			default:
				return NOT_SUPPORTED;
		}
	}
	return OK; //everything went ok	
}







//effect duration maintenance functions! 

BOOL ItemEffects::mfAddActiveItem(PFLLLL f,LONG a1,LONG a2,LONG dur,BOOL fAR)
{
	ITEMTYPE		Itemtype;
	SHORT			hAvatarStats;
	
 	SPLIT_COMBO(a1,Itemtype,hAvatarStats);
	ItemType&		Item=ItemTypes[Itemtype];
	

	if (mfGetActiveItem(f,a1,a2))
	{
		char buffer[120];
		strcpy(buffer, STRMGR_GetStr(STR_ITEM_ALREADY_IN_EFFECT));
		mfMessageBox(Item.mfGetName(), buffer);
		return FALSE;
	}
	
	LONG i;
	for (i=0;i<MAX_ACTIVE_ITEMS;++i)
	{
		if (!ActiveItems[i].Valid)
			break;
	}
	
	if (i >= MAX_ACTIVE_ITEMS)
	{
#if defined (DEBUG)
		fatal_error("Exceeded maximum active things in the inventory.\n");
#endif
		return FALSE;	// Out of space.
	}

	printf("ActiveItem Index set as %li\n",i);

	ActiveItem& ai=ActiveItems[i];

	if (dur!=INDEFINATE_DUR)
		ai.TimeToStop=SCENE_MGR::gTick+(dur*18.2);  
	else
		ai.TimeToStop=0;
	
	ai.Func=f;
	ai.Arg1=a1;
	ai.Arg2=a2;
	//printf("making active Args %li and %li\n",ai.Arg1,ai.Arg2);
	ai.Valid=TRUE;
	ai.AutoRemove=fAR;
	return TRUE;
}

void ItemEffects::DeactivateAllItems()
{
	for (LONG i=0;i<MAX_ACTIVE_ITEMS;++i)
	{
		ActiveItem& ai=ActiveItems[i];
		if (ai.Valid == TRUE && ai.Func != 0)
			(*ai.Func)(ai.Arg1,ai.Arg2,DEACTIVATE);
	}
}
			

ItemEffects::ActiveItem* ItemEffects::mfGetActiveItem(PFLLLL f,LONG a1,LONG a2)
{
	for (LONG i=0;i<MAX_ACTIVE_ITEMS;++i)
	{
		ActiveItem& ai=ActiveItems[i];
		if (ai.Valid && ai.Func==f && ai.Arg1==a1 && ai.Arg2==a2)
			return &ai;			 
	}
	return NULL;
	
}
	
	
	

//Service Durations takes a long because it's used as a task.
void ItemEffects::ServiceDurations(LONG)  
{
	Regenerator::Service();

	for(LONG i=0;i<MAX_ACTIVE_ITEMS;++i)
	{
		ActiveItem& ai=ActiveItems[i];
		
		if (ai.Valid && ai.Func != NULL && !fPause)
		{
			
			if (ai.TimeToStop != INDEFINATE_DUR && ai.TimeToStop < SCENE_MGR::gTick)
				(*ai.Func)(ai.Arg1,ai.Arg2,DEACTIVATE);


			else
			{
//				ITEMTYPE		Itemtype;
//				SHORT			hPlayerStats;
//			 	SPLIT_COMBO(ai.Arg1,Itemtype,hPlayerStats);
//				if(!fDomainTurn)
//					printf("Item %li has %li seconds left (%li,%li)\n",Itemtype,(ai.TimeToStop-SCENE_MGR::gTick)/18,ai.TimeToStop,SCENE_MGR::gTick);


				(*ai.Func)(ai.Arg1,ai.Arg2,SERVICE);
			}
		}
	}
}


/* ========================================================================
   Function    - mfPauseDurations
   Description - While waiting for the player to move or make up their
   			     mind, hold on all the durations.
   Returns     - 
   ======================================================================== */

void ItemEffects::mfPauseDurations(LONG const DiffTime)
{
	for(LONG i=0;i<MAX_ACTIVE_ITEMS;++i)
	{
		ActiveItem& ai=ActiveItems[i];
		
		if (ai.Valid 
			&& ai.Func != NULL 
			&& !fPause 
			&& ai.TimeToStop != INDEFINATE_DUR)
		{
			ai.TimeToStop += DiffTime;
		}
	}
}


void ItemEffects::mfRemoveActiveItem(PFLLLL a,LONG b,LONG c)
{
	for (LONG i=0;i<MAX_ACTIVE_ITEMS;++i)
	{
		ActiveItem& ai=ActiveItems[i];
		if (ai.Valid && ai.Func==a && ai.Arg1==b && ai.Arg2==c)
		{
//			printf("index %li found\n",i);
			ai.Valid=FALSE;
			ai.Func=NULL;
			ai.Arg1=-1;
			ai.Arg2=-1;
			return;
		}
			
	}
}



void ItemEffects::WipeActiveItems()
{
	for (LONG i=0;i<MAX_ACTIVE_ITEMS;++i)
		ActiveItems[i].Valid=FALSE;
}

void ItemEffects::DeactivateAvatarsItems(SHORT hPlayerStats)
{
	for (LONG i=0;i<MAX_ACTIVE_ITEMS;++i)
	{
		ActiveItem& ai=ActiveItems[i];

		SHORT hAvStats=fERROR;
		SHORT Itemtype=fERROR;
		SPLIT_COMBO(ActiveItems[i].Arg1,Itemtype,hAvStats);


		if (ai.Valid == TRUE && ai.Func != NULL && hAvStats==hPlayerStats)
		{
			fQuietItems=TRUE;
			(*ai.Func)(ai.Arg1,ai.Arg2,DEACTIVATE);
			fQuietItems=FALSE;
			ai.Valid=FALSE;
			ai.Func=NULL;
			ai.Arg1=-1;
			ai.Arg2=-1;
		}
	}
}			

		


SHORT ItemType::mfDuration(SHORT AvaStatsHdl) const
{
	if(IC_SPELL!=Category || !(Duration&PER_LEVEL))
		return Duration & ~PER_LEVEL;

	PTR_PLAYER_STATS pss =(PTR_PLAYER_STATS)BLKPTR(AvaStatsHdl);
	SHORT PriestClass=pss->mfGetSpellCastClass(SPELL_INFO::PRIEST);
	SHORT WizardClass=pss->mfGetSpellCastClass(SPELL_INFO::WIZARD);


	if (WizardClass!=CANT_CAST_SPELLS)
		return (Duration& ~PER_LEVEL)*(pss->mfGetLevel(WizardClass));

	else if (PriestClass!=CANT_CAST_SPELLS)
		return (Duration & ~PER_LEVEL)*(pss->mfGetLevel(PriestClass));
	
	else
		return Duration & ~PER_LEVEL; //assume first level
	
}	

SHORT TargetMenu::CharCount;
SHORT TargetMenu::TargetType;
LONG TargetMenu::TargetArgs;
SHORT TargetMenu::StatsHdls[4]={fERROR, fERROR,fERROR,fERROR};
void TargetMenu::Paint(LONG MenuCombo, LONG Arg)
{	
	LONG MenuIdx;
	LONG ButtonID;
	SPLIT_LONG(MenuCombo,MenuIdx,ButtonID);

	char NameBuf[30];
	LONG NameX;
	LONG NameY;
	LONG NameW;
	LONG NameH;

	ADVENTURER_TEAM_ITOR AdvItor;
	
	LONG button, index;
	for (index = 0; index < CharCount; ++index)
	{
		button = index + RESURRECT_BUT_NAME1;
		
		GetButtonPosition(MenuIdx,button,&NameX,&NameY);
		GetButtonSize(MenuIdx,button,&NameW,&NameH);
		
		DumbAutoLockPtr< PLAYER_STATS > const pPS(StatsHdls[index]);
      // [d4-09-97 JPC] Changed the following because the PLAYER_NAME
      // class is going away.
      // strncpy(NameBuf, PLAYER_NAME::mfGetName(pPS->NameClass.fName), 30);
      strncpy(NameBuf, pPS->mfGetName(), 30);
		print_text_centered(NameX+(NameW/2), NameY+(NameH/2)+1, NameBuf,BLACK);
	}
}

void TargetMenu::Activate(LONG MenuCombo, LONG Arg)
{	
	LONG MenuIdx;
	LONG ButtonID;
	SPLIT_LONG(MenuCombo,MenuIdx,ButtonID);
	
	SHORT hTargetStats = TargetMenu::StatsHdls[Arg];
	if (hTargetStats==fERROR)
		return;

	HideSubMenu(0,D_RESURRECT_MENU);
	RunMenus();
	
	// reset the menu for resurrection
	for (LONG i=0; i < 4; ++i)
	{
	    LONG button = RESURRECT_BUT_NAME1 + i;
	    SetButtonProc(MenuIdx, button, ResurrectionMenu::Resurrect, i, NO_KEY);
	}
	
	DumbAutoLockPtr< PLAYER_STATS > const pTargetStats(hTargetStats);
	if (pTargetStats->hAvatar == fERROR)
		return;
		
	DumbAutoLockPtr< CAvatar > const pTargetAvatar(pTargetStats->hAvatar);
	
	LONG combo;
	combo = BUILD_LONG(TargetType, hTargetStats);
	
	switch(TargetType)
	{
		case ITEM_SPELL_STRENGTH:
			ItemEffects::Strength(combo, TargetArgs, ACTIVATE);
			break;
			
		case ITEM_SPELL_CURE_LIGHT:
		case ITEM_SPELL_CURE_SERIOUS:
		case ITEM_SPELL_CURE_CRITICAL:
		case ITEM_SPELL_HEAL:
		case ITEM_STAFF_OF_CURING:
			ItemEffects::Heal(combo, TargetArgs, ACTIVATE);
			
		default:
			break;
	}
}	

void TargetMenu::Display(LONG combo, LONG targetargs)
{
	SHORT hCasterStats;
	SHORT targettype;
	
	SPLIT_LONG(combo, targettype, hCasterStats);
	
	TargetType = targettype;
	TargetArgs = targetargs;
	
	
	LONG index = 0;
	ADVENTURER_TEAM_ITOR AdvItor;
	
//	FILE *fp = fopen("blah", "w");
	for (AdvItor = ADVENTURER::begin();
		AdvItor != ADVENTURER::end();
		AdvItor++)
	{
		if (*AdvItor == fERROR)
			continue;
		
		CAvatar const *const pAvatar = (CAvatar const * const) BLKPTR(*AdvItor);
		
		TargetMenu::StatsHdls[index] = pAvatar->hPlayerStats;
//		fprintf(fp, "Setting stats handle %d to %d\n", index, StatsHdls[index]);
		
		DumbAutoLockPtr< PLAYER_STATS > const pPS(pAvatar->hPlayerStats);
		
		++index;
	}
	
	CharCount = index;
	
	for (LONG i=0; i < 4; ++i)
	{
		LONG button = i + RESURRECT_BUT_NAME1;
		
		if (i < CharCount)
		{
//		    fprintf(fp, "Setting button %d to Activate %d, with hPS of %d.\n",
//		    	button, i, StatsHdls[i]);
		    SetButtonProc(D_RESURRECT_MENU, button, TargetMenu::Activate, i, NO_KEY);
		}
		else    
		{
//			fprintf(fp, "Button %d unused.\n");
			SetButtonProc(D_RESURRECT_MENU, button, NULL, 0, NO_KEY);
		}
	}
//	fclose(fp);
	
	SetButtonLabel(D_RESURRECT_MENU, RESURRECT_BUT_TITLE, STR_ITEM_UI_TARGET, BLACK);
	SetButtonLabel(D_RESURRECT_MENU, RESURRECT_BUT_Q, STR_ITEM_UI_TARGET_QUESTION, BLACK);
	SetButtonProc(D_RESURRECT_MENU, RESURRECT_BUT_ALL, TargetMenu::Paint, 0, NO_KEY);
	ShowSubMenu(0,D_RESURRECT_MENU);
}

ItemChargeHandler::ChargedItemChain::ChargedItemChain(LONG num,ITEMTYPE a,ITEMTYPE b,ITEMTYPE c,ITEMTYPE d,ITEMTYPE e,ITEMTYPE f,ITEMTYPE g,ITEMTYPE h,ITEMTYPE i,ITEMTYPE j)
{
	numCharges=num;
	ItemTypeChain[0]=a;
	ItemTypeChain[1]=b;
	ItemTypeChain[2]=c;
	ItemTypeChain[3]=d;
	ItemTypeChain[4]=e;
	ItemTypeChain[5]=f;
	ItemTypeChain[6]=g;
	ItemTypeChain[7]=h;
	ItemTypeChain[8]=i;
	ItemTypeChain[9]=j;
}


void ItemChargeHandler::mfDropCharge(ITEMTYPE ItemTypeIdx,SHORT hAvatarStats)
{
	LONG iFound,jFound;
	
	if(!mfFind(ItemTypeIdx,&iFound,&jFound))
		return;

	
	DumbAutoLockPtr< PLAYER_STATS > const pStats(hAvatarStats);
	InventoryItor itor(pStats->mfGetInventory());

	if (!itor.mfFind(ItemTypeIdx))
		return;
	
	if (ChargeDegradeTable[iFound][jFound+1])
	{
		itor.mfChangeTo(ChargeDegradeTable[iFound][jFound+1]);
		return;
	}
	else
	{
		LONG iSpellBoxFound;

		if (pStats->Inventory.mfFindInSpellBoxes(ItemTypeIdx,&iSpellBoxFound))
		{	
			InventoryItor itor2(pStats->Inventory);
			LONG jSearch;
			for (jSearch =0;jSearch<MAX_CHARGES;++jSearch)
			{
				if (jSearch==jFound)
					continue;

				if (itor2.mfFind(ChargeDegradeTable[iFound][jSearch]))
				{
					pStats->Inventory.mfChangeSpellBox(iSpellBoxFound,itor2.mfGetCurrentInvIndex());
					break;
				}
			}

			if (jSearch==MAX_CHARGES)
				pStats->Inventory.mfClearSpellBox(iSpellBoxFound);
				
		}
				
		itor.mfDropItem();
			
	}
}
		
	
LONG ItemChargeHandler::mfCharges(ITEMTYPE ItemTypeIdx)
{
	LONG iFound,jFound;
	
	if(!mfFind(ItemTypeIdx,&iFound,&jFound))
		return 0;

	LONG Charges=ChargeDegradeTable[iFound].mfCharges()-jFound;

	if (Charges<=0)
		return 0;
	else
		return Charges;
}


BOOL ItemChargeHandler::mfFind(ITEMTYPE ItemTypeIdx,LONG* iFound,LONG* jFound)
{
	LONG i=0,j=0;
	

	for (i=0;i<NumChargedItems;++i)
		for (j=0;ChargeDegradeTable[i][j]!=ITEM_NO_THING;++j)
			if (ChargeDegradeTable[i][j]==ItemTypeIdx)
			{
				*iFound=i;
				*jFound=j;
				return TRUE;
			}
	
	*iFound= -1;
	*jFound=-1;
	return FALSE;

}
	
	
	


